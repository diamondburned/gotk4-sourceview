// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// GType values.
var (
	GTypeCompletionWords = coreglib.Type(C.gtk_source_completion_words_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCompletionWords, F: marshalCompletionWords},
	})
}

// CompletionWordsOverrides contains methods that are overridable.
type CompletionWordsOverrides struct {
}

func defaultCompletionWordsOverrides(v *CompletionWords) CompletionWordsOverrides {
	return CompletionWordsOverrides{}
}

type CompletionWords struct {
	_ [0]func() // equal guard
	*coreglib.Object

	CompletionProvider
}

var (
	_ coreglib.Objector = (*CompletionWords)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CompletionWords, *CompletionWordsClass, CompletionWordsOverrides](
		GTypeCompletionWords,
		initCompletionWordsClass,
		wrapCompletionWords,
		defaultCompletionWordsOverrides,
	)
}

func initCompletionWordsClass(gclass unsafe.Pointer, overrides CompletionWordsOverrides, classInitFunc func(*CompletionWordsClass)) {
	if classInitFunc != nil {
		class := (*CompletionWordsClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCompletionWords(obj *coreglib.Object) *CompletionWords {
	return &CompletionWords{
		Object: obj,
		CompletionProvider: CompletionProvider{
			Object: obj,
		},
	}
}

func marshalCompletionWords(p uintptr) (interface{}, error) {
	return wrapCompletionWords(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//   - name (optional) for the provider, or NULL.
//   - icon (optional): specific icon for the provider, or NULL.
//
// The function returns the following values:
//
//   - completionWords: new SourceCompletionWords provider.
//
func NewCompletionWords(name string, icon *gdkpixbuf.Pixbuf) *CompletionWords {
	var _arg1 *C.gchar                    // out
	var _arg2 *C.GdkPixbuf                // out
	var _cret *C.GtkSourceCompletionWords // in

	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if icon != nil {
		_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	}

	_cret = C.gtk_source_completion_words_new(_arg1, _arg2)
	runtime.KeepAlive(name)
	runtime.KeepAlive(icon)

	var _completionWords *CompletionWords // out

	_completionWords = wrapCompletionWords(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _completionWords
}

// Register registers buffer in the words provider.
//
// The function takes the following parameters:
//
//   - buffer: TextBuffer.
//
func (words *CompletionWords) Register(buffer *gtk.TextBuffer) {
	var _arg0 *C.GtkSourceCompletionWords // out
	var _arg1 *C.GtkTextBuffer            // out

	_arg0 = (*C.GtkSourceCompletionWords)(unsafe.Pointer(coreglib.InternObject(words).Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))

	C.gtk_source_completion_words_register(_arg0, _arg1)
	runtime.KeepAlive(words)
	runtime.KeepAlive(buffer)
}

// Unregister unregisters buffer from the words provider.
//
// The function takes the following parameters:
//
//   - buffer: TextBuffer.
//
func (words *CompletionWords) Unregister(buffer *gtk.TextBuffer) {
	var _arg0 *C.GtkSourceCompletionWords // out
	var _arg1 *C.GtkTextBuffer            // out

	_arg0 = (*C.GtkSourceCompletionWords)(unsafe.Pointer(coreglib.InternObject(words).Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))

	C.gtk_source_completion_words_unregister(_arg0, _arg1)
	runtime.KeepAlive(words)
	runtime.KeepAlive(buffer)
}

// CompletionWordsClass: instance of this type is always passed by reference.
type CompletionWordsClass struct {
	*completionWordsClass
}

// completionWordsClass is the struct that's finalized.
type completionWordsClass struct {
	native *C.GtkSourceCompletionWordsClass
}
