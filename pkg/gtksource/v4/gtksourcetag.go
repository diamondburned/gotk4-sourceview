// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// GType values.
var (
	GTypeTag = coreglib.Type(C.gtk_source_tag_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTag, F: marshalTag},
	})
}

// TagOverrides contains methods that are overridable.
type TagOverrides struct {
}

func defaultTagOverrides(v *Tag) TagOverrides {
	return TagOverrides{}
}

type Tag struct {
	_ [0]func() // equal guard
	gtk.TextTag
}

var (
	_ coreglib.Objector = (*Tag)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Tag, *TagClass, TagOverrides](
		GTypeTag,
		initTagClass,
		wrapTag,
		defaultTagOverrides,
	)
}

func initTagClass(gclass unsafe.Pointer, overrides TagOverrides, classInitFunc func(*TagClass)) {
	if classInitFunc != nil {
		class := (*TagClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTag(obj *coreglib.Object) *Tag {
	return &Tag{
		TextTag: gtk.TextTag{
			Object: obj,
		},
	}
}

func marshalTag(p uintptr) (interface{}, error) {
	return wrapTag(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewTag creates a SourceTag. Configure the tag using object arguments, i.e.
// using g_object_set().
//
// For usual cases, gtk_source_buffer_create_source_tag() is more convenient to
// use.
//
// The function takes the following parameters:
//
//   - name (optional): tag name, or NULL.
//
// The function returns the following values:
//
//   - tag: new SourceTag.
//
func NewTag(name string) *Tag {
	var _arg1 *C.gchar      // out
	var _cret *C.GtkTextTag // in

	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.gtk_source_tag_new(_arg1)
	runtime.KeepAlive(name)

	var _tag *Tag // out

	_tag = wrapTag(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _tag
}

// TagClass: instance of this type is always passed by reference.
type TagClass struct {
	*tagClass
}

// tagClass is the struct that's finalized.
type tagClass struct {
	native *C.GtkSourceTagClass
}

func (t *TagClass) ParentClass() *gtk.TextTagClass {
	valptr := &t.native.parent_class
	var _v *gtk.TextTagClass // out
	_v = (*gtk.TextTagClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

func (t *TagClass) Padding() [10]unsafe.Pointer {
	valptr := &t.native.padding
	var _v [10]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 10; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
