// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern gboolean _gotk4_gtksource4_GutterRendererClass_query_activatable(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*, GdkEvent*);
// extern gboolean _gotk4_gtksource4_GutterRendererClass_query_tooltip(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*, gint, gint, GtkTooltip*);
// extern gboolean _gotk4_gtksource4_GutterRenderer_ConnectQueryActivatable(gpointer, GtkTextIter*, GdkRectangle*, GdkEvent, guintptr);
// extern gboolean _gotk4_gtksource4_GutterRenderer_ConnectQueryTooltip(gpointer, GtkTextIter*, GdkRectangle*, gint, gint, GtkTooltip*, guintptr);
// extern void _gotk4_gtksource4_GutterRendererClass_activate(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*, GdkEvent*);
// extern void _gotk4_gtksource4_GutterRendererClass_begin(GtkSourceGutterRenderer*, cairo_t*, GdkRectangle*, GdkRectangle*, GtkTextIter*, GtkTextIter*);
// extern void _gotk4_gtksource4_GutterRendererClass_change_buffer(GtkSourceGutterRenderer*, GtkTextBuffer*);
// extern void _gotk4_gtksource4_GutterRendererClass_change_view(GtkSourceGutterRenderer*, GtkTextView*);
// extern void _gotk4_gtksource4_GutterRendererClass_draw(GtkSourceGutterRenderer*, cairo_t*, GdkRectangle*, GdkRectangle*, GtkTextIter*, GtkTextIter*, GtkSourceGutterRendererState);
// extern void _gotk4_gtksource4_GutterRendererClass_end(GtkSourceGutterRenderer*);
// extern void _gotk4_gtksource4_GutterRendererClass_query_data(GtkSourceGutterRenderer*, GtkTextIter*, GtkTextIter*, GtkSourceGutterRendererState);
// extern void _gotk4_gtksource4_GutterRendererClass_queue_draw(GtkSourceGutterRenderer*);
// extern void _gotk4_gtksource4_GutterRenderer_ConnectActivate(gpointer, GtkTextIter*, GdkRectangle*, GdkEvent, guintptr);
// extern void _gotk4_gtksource4_GutterRenderer_ConnectQueryData(gpointer, GtkTextIter*, GtkTextIter*, GtkSourceGutterRendererState, guintptr);
// extern void _gotk4_gtksource4_GutterRenderer_ConnectQueueDraw(gpointer, guintptr);
import "C"

// glib.Type values for gtksourcegutterrenderer.go.
var (
	GTypeGutterRendererAlignmentMode = externglib.Type(C.gtk_source_gutter_renderer_alignment_mode_get_type())
	GTypeGutterRenderer              = externglib.Type(C.gtk_source_gutter_renderer_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeGutterRendererAlignmentMode, F: marshalGutterRendererAlignmentMode},
		{T: GTypeGutterRenderer, F: marshalGutterRenderer},
	})
}

// GutterRendererAlignmentMode: alignment mode of the renderer, when a cell
// spans multiple lines (due to text wrapping).
type GutterRendererAlignmentMode C.gint

const (
	// SourceGutterRendererAlignmentModeCell: full cell.
	SourceGutterRendererAlignmentModeCell GutterRendererAlignmentMode = iota
	// SourceGutterRendererAlignmentModeFirst: first line.
	SourceGutterRendererAlignmentModeFirst
	// SourceGutterRendererAlignmentModeLast: last line.
	SourceGutterRendererAlignmentModeLast
)

func marshalGutterRendererAlignmentMode(p uintptr) (interface{}, error) {
	return GutterRendererAlignmentMode(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for GutterRendererAlignmentMode.
func (g GutterRendererAlignmentMode) String() string {
	switch g {
	case SourceGutterRendererAlignmentModeCell:
		return "Cell"
	case SourceGutterRendererAlignmentModeFirst:
		return "First"
	case SourceGutterRendererAlignmentModeLast:
		return "Last"
	default:
		return fmt.Sprintf("GutterRendererAlignmentMode(%d)", g)
	}
}

// GutterRendererOverrider contains methods that are overridable.
type GutterRendererOverrider interface {
	// Activate emits the SourceGutterRenderer::activate signal of the renderer.
	// This is called from SourceGutter and should never have to be called
	// manually.
	//
	// The function takes the following parameters:
	//
	//    - iter at the start of the line where the renderer is activated.
	//    - area of the cell area where the renderer is activated.
	//    - event that triggered the activation.
	//
	Activate(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event)
	// Begin: called when drawing a region begins. The region to be drawn is
	// indicated by start and end. The purpose is to allow the implementation to
	// precompute some state before the draw method is called for each cell.
	//
	// The function takes the following parameters:
	//
	//    - cr: #cairo_t.
	//    - backgroundArea: Rectangle.
	//    - cellArea: Rectangle.
	//    - start: TextIter.
	//    - end: TextIter.
	//
	Begin(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter)
	// ChangeBuffer: this is called when the text buffer changes for renderer.
	//
	// The function takes the following parameters:
	//
	//    - oldBuffer (optional): old TextBuffer.
	//
	ChangeBuffer(oldBuffer *gtk.TextBuffer)
	// ChangeView: this is called when the text view changes for renderer.
	//
	// The function takes the following parameters:
	//
	//    - oldView (optional): old TextView.
	//
	ChangeView(oldView *gtk.TextView)
	// Draw: main renderering method. Implementations should implement this
	// method to draw onto the cairo context. The background_area indicates the
	// total area of the cell to be drawn. The cell_area indicates the area
	// where content can be drawn (text, images, etc).
	//
	// The background_area is the cell_area plus the padding on each side (two
	// times the SourceGutterRenderer:xpad horizontally and two times the
	// SourceGutterRenderer:ypad vertically, so that the cell_area is centered
	// inside background_area).
	//
	// The state argument indicates the current state of the renderer and should
	// be taken into account to properly draw the different possible states
	// (cursor, prelit, selected) if appropriate.
	//
	// The function takes the following parameters:
	//
	//    - cr: cairo render context.
	//    - backgroundArea indicating the total area to be drawn.
	//    - cellArea indicating the area to draw content.
	//    - start: TextIter.
	//    - end: TextIter.
	//    - state: SourceGutterRendererState.
	//
	Draw(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter, state GutterRendererState)
	// End: called when drawing a region of lines has ended.
	End()
	// QueryActivatable: get whether the renderer is activatable at the location
	// in event. This is called from SourceGutter to determine whether a
	// renderer is activatable using the mouse pointer.
	//
	// The function takes the following parameters:
	//
	//    - iter at the start of the line to be activated.
	//    - area of the cell area to be activated.
	//    - event that triggered the query.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the renderer can be activated, FALSE otherwise.
	//
	QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) bool
	// QueryData: emit the SourceGutterRenderer::query-data signal. This
	// function is called to query for data just before rendering a cell. This
	// is called from the SourceGutter. Implementations can override the default
	// signal handler or can connect a signal handler externally to the
	// SourceGutterRenderer::query-data signal.
	//
	// The function takes the following parameters:
	//
	//    - start: TextIter.
	//    - end: TextIter.
	//    - state: SourceGutterRendererState.
	//
	QueryData(start, end *gtk.TextIter, state GutterRendererState)
	// QueryTooltip emits the SourceGutterRenderer::query-tooltip signal. This
	// function is called from SourceGutter. Implementations can override the
	// default signal handler or can connect to the signal externally.
	//
	// The function takes the following parameters:
	//
	//    - iter: TextIter.
	//    - area: Rectangle.
	//    - x position of the tooltip.
	//    - y position of the tooltip.
	//    - tooltip: Tooltip.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the tooltip has been set, FALSE otherwise.
	//
	QueryTooltip(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) bool
	// QueueDraw emits the SourceGutterRenderer::queue-draw signal of the
	// renderer. Call this from an implementation to inform that the renderer
	// has changed such that it needs to redraw.
	QueueDraw()
}

type GutterRenderer struct {
	_ [0]func() // equal guard
	externglib.InitiallyUnowned
}

var ()

// GutterRendererer describes types inherited from class GutterRenderer.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type GutterRendererer interface {
	externglib.Objector
	baseGutterRenderer() *GutterRenderer
}

var _ GutterRendererer = (*GutterRenderer)(nil)

func classInitGutterRendererer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkSourceGutterRendererClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkSourceGutterRendererClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface {
		Activate(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event)
	}); ok {
		pclass.activate = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_activate)
	}

	if _, ok := goval.(interface {
		Begin(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter)
	}); ok {
		pclass.begin = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_begin)
	}

	if _, ok := goval.(interface {
		ChangeBuffer(oldBuffer *gtk.TextBuffer)
	}); ok {
		pclass.change_buffer = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_change_buffer)
	}

	if _, ok := goval.(interface{ ChangeView(oldView *gtk.TextView) }); ok {
		pclass.change_view = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_change_view)
	}

	if _, ok := goval.(interface {
		Draw(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter, state GutterRendererState)
	}); ok {
		pclass.draw = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_draw)
	}

	if _, ok := goval.(interface{ End() }); ok {
		pclass.end = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_end)
	}

	if _, ok := goval.(interface {
		QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) bool
	}); ok {
		pclass.query_activatable = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_query_activatable)
	}

	if _, ok := goval.(interface {
		QueryData(start, end *gtk.TextIter, state GutterRendererState)
	}); ok {
		pclass.query_data = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_query_data)
	}

	if _, ok := goval.(interface {
		QueryTooltip(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) bool
	}); ok {
		pclass.query_tooltip = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_query_tooltip)
	}

	if _, ok := goval.(interface{ QueueDraw() }); ok {
		pclass.queue_draw = (*[0]byte)(C._gotk4_gtksource4_GutterRendererClass_queue_draw)
	}
}

//export _gotk4_gtksource4_GutterRendererClass_activate
func _gotk4_gtksource4_GutterRendererClass_activate(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 *C.GdkEvent) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Activate(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event)
	})

	var _iter *gtk.TextIter  // out
	var _area *gdk.Rectangle // out
	var _event *gdk.Event    // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer(arg3)))
		v = gdk.CopyEventer(v)
		_event = v
	}

	iface.Activate(_iter, _area, _event)
}

//export _gotk4_gtksource4_GutterRendererClass_begin
func _gotk4_gtksource4_GutterRendererClass_begin(arg0 *C.GtkSourceGutterRenderer, arg1 *C.cairo_t, arg2 *C.GdkRectangle, arg3 *C.GdkRectangle, arg4 *C.GtkTextIter, arg5 *C.GtkTextIter) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Begin(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter)
	})

	var _cr *cairo.Context             // out
	var _backgroundArea *gdk.Rectangle // out
	var _cellArea *gdk.Rectangle       // out
	var _start *gtk.TextIter           // out
	var _end *gtk.TextIter             // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.cairo_t)(unsafe.Pointer(v.Native())))
	})
	_backgroundArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_cellArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg5)))

	iface.Begin(_cr, _backgroundArea, _cellArea, _start, _end)
}

//export _gotk4_gtksource4_GutterRendererClass_change_buffer
func _gotk4_gtksource4_GutterRendererClass_change_buffer(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextBuffer) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ChangeBuffer(oldBuffer *gtk.TextBuffer)
	})

	var _oldBuffer *gtk.TextBuffer // out

	if arg1 != nil {
		{
			obj := externglib.Take(unsafe.Pointer(arg1))
			_oldBuffer = &gtk.TextBuffer{
				Object: obj,
			}
		}
	}

	iface.ChangeBuffer(_oldBuffer)
}

//export _gotk4_gtksource4_GutterRendererClass_change_view
func _gotk4_gtksource4_GutterRendererClass_change_view(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextView) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ChangeView(oldView *gtk.TextView) })

	var _oldView *gtk.TextView // out

	if arg1 != nil {
		{
			obj := externglib.Take(unsafe.Pointer(arg1))
			_oldView = &gtk.TextView{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
				Object: obj,
				Scrollable: gtk.Scrollable{
					Object: obj,
				},
			}
		}
	}

	iface.ChangeView(_oldView)
}

//export _gotk4_gtksource4_GutterRendererClass_draw
func _gotk4_gtksource4_GutterRendererClass_draw(arg0 *C.GtkSourceGutterRenderer, arg1 *C.cairo_t, arg2 *C.GdkRectangle, arg3 *C.GdkRectangle, arg4 *C.GtkTextIter, arg5 *C.GtkTextIter, arg6 C.GtkSourceGutterRendererState) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Draw(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter, state GutterRendererState)
	})

	var _cr *cairo.Context             // out
	var _backgroundArea *gdk.Rectangle // out
	var _cellArea *gdk.Rectangle       // out
	var _start *gtk.TextIter           // out
	var _end *gtk.TextIter             // out
	var _state GutterRendererState     // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.cairo_t)(unsafe.Pointer(v.Native())))
	})
	_backgroundArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_cellArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg5)))
	_state = GutterRendererState(arg6)

	iface.Draw(_cr, _backgroundArea, _cellArea, _start, _end, _state)
}

//export _gotk4_gtksource4_GutterRendererClass_end
func _gotk4_gtksource4_GutterRendererClass_end(arg0 *C.GtkSourceGutterRenderer) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ End() })

	iface.End()
}

//export _gotk4_gtksource4_GutterRendererClass_query_activatable
func _gotk4_gtksource4_GutterRendererClass_query_activatable(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 *C.GdkEvent) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) bool
	})

	var _iter *gtk.TextIter  // out
	var _area *gdk.Rectangle // out
	var _event *gdk.Event    // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer(arg3)))
		v = gdk.CopyEventer(v)
		_event = v
	}

	ok := iface.QueryActivatable(_iter, _area, _event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtksource4_GutterRendererClass_query_data
func _gotk4_gtksource4_GutterRendererClass_query_data(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GtkTextIter, arg3 C.GtkSourceGutterRendererState) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		QueryData(start, end *gtk.TextIter, state GutterRendererState)
	})

	var _start *gtk.TextIter       // out
	var _end *gtk.TextIter         // out
	var _state GutterRendererState // out

	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_state = GutterRendererState(arg3)

	iface.QueryData(_start, _end, _state)
}

//export _gotk4_gtksource4_GutterRendererClass_query_tooltip
func _gotk4_gtksource4_GutterRendererClass_query_tooltip(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 C.gint, arg4 C.gint, arg5 *C.GtkTooltip) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		QueryTooltip(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) bool
	})

	var _iter *gtk.TextIter   // out
	var _area *gdk.Rectangle  // out
	var _x int                // out
	var _y int                // out
	var _tooltip *gtk.Tooltip // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_x = int(arg3)
	_y = int(arg4)
	{
		obj := externglib.Take(unsafe.Pointer(arg5))
		_tooltip = &gtk.Tooltip{
			Object: obj,
		}
	}

	ok := iface.QueryTooltip(_iter, _area, _x, _y, _tooltip)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtksource4_GutterRendererClass_queue_draw
func _gotk4_gtksource4_GutterRendererClass_queue_draw(arg0 *C.GtkSourceGutterRenderer) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ QueueDraw() })

	iface.QueueDraw()
}

func wrapGutterRenderer(obj *externglib.Object) *GutterRenderer {
	return &GutterRenderer{
		InitiallyUnowned: externglib.InitiallyUnowned{
			Object: obj,
		},
	}
}

func marshalGutterRenderer(p uintptr) (interface{}, error) {
	return wrapGutterRenderer(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (renderer *GutterRenderer) baseGutterRenderer() *GutterRenderer {
	return renderer
}

// BaseGutterRenderer returns the underlying base object.
func BaseGutterRenderer(obj GutterRendererer) *GutterRenderer {
	return obj.baseGutterRenderer()
}

//export _gotk4_gtksource4_GutterRenderer_ConnectActivate
func _gotk4_gtksource4_GutterRenderer_ConnectActivate(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 C.GdkEvent, arg4 C.guintptr) {
	var f func(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event))
	}

	var _iter *gtk.TextIter  // out
	var _area *gdk.Rectangle // out
	var _event *gdk.Event    // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer((&arg3))))
		v = gdk.CopyEventer(v)
		_event = v
	}

	f(_iter, _area, _event)
}

// ConnectActivate signal is emitted when the renderer is activated.
func (renderer *GutterRenderer) ConnectActivate(f func(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(renderer, "activate", false, unsafe.Pointer(C._gotk4_gtksource4_GutterRenderer_ConnectActivate), f)
}

//export _gotk4_gtksource4_GutterRenderer_ConnectQueryActivatable
func _gotk4_gtksource4_GutterRenderer_ConnectQueryActivatable(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 C.GdkEvent, arg4 C.guintptr) (cret C.gboolean) {
	var f func(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) (ok bool)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) (ok bool))
	}

	var _iter *gtk.TextIter  // out
	var _area *gdk.Rectangle // out
	var _event *gdk.Event    // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer((&arg3))))
		v = gdk.CopyEventer(v)
		_event = v
	}

	ok := f(_iter, _area, _event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectQueryActivatable signal is emitted when the renderer can possibly be
// activated.
func (renderer *GutterRenderer) ConnectQueryActivatable(f func(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) (ok bool)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(renderer, "query-activatable", false, unsafe.Pointer(C._gotk4_gtksource4_GutterRenderer_ConnectQueryActivatable), f)
}

//export _gotk4_gtksource4_GutterRenderer_ConnectQueryData
func _gotk4_gtksource4_GutterRenderer_ConnectQueryData(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 *C.GtkTextIter, arg3 C.GtkSourceGutterRendererState, arg4 C.guintptr) {
	var f func(start, end *gtk.TextIter, state GutterRendererState)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(start, end *gtk.TextIter, state GutterRendererState))
	}

	var _start *gtk.TextIter       // out
	var _end *gtk.TextIter         // out
	var _state GutterRendererState // out

	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_state = GutterRendererState(arg3)

	f(_start, _end, _state)
}

// ConnectQueryData signal is emitted when the renderer needs to be filled with
// data just before a cell is drawn. This can be used by general renderer
// implementations to allow render data to be filled in externally.
func (renderer *GutterRenderer) ConnectQueryData(f func(start, end *gtk.TextIter, state GutterRendererState)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(renderer, "query-data", false, unsafe.Pointer(C._gotk4_gtksource4_GutterRenderer_ConnectQueryData), f)
}

//export _gotk4_gtksource4_GutterRenderer_ConnectQueryTooltip
func _gotk4_gtksource4_GutterRenderer_ConnectQueryTooltip(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 C.gint, arg4 C.gint, arg5 *C.GtkTooltip, arg6 C.guintptr) (cret C.gboolean) {
	var f func(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) (ok bool)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg6))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) (ok bool))
	}

	var _iter *gtk.TextIter   // out
	var _area *gdk.Rectangle  // out
	var _x int                // out
	var _y int                // out
	var _tooltip *gtk.Tooltip // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_x = int(arg3)
	_y = int(arg4)
	{
		obj := externglib.Take(unsafe.Pointer(arg5))
		_tooltip = &gtk.Tooltip{
			Object: obj,
		}
	}

	ok := f(_iter, _area, _x, _y, _tooltip)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectQueryTooltip signal is emitted when the renderer can show a tooltip.
func (renderer *GutterRenderer) ConnectQueryTooltip(f func(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) (ok bool)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(renderer, "query-tooltip", false, unsafe.Pointer(C._gotk4_gtksource4_GutterRenderer_ConnectQueryTooltip), f)
}

//export _gotk4_gtksource4_GutterRenderer_ConnectQueueDraw
func _gotk4_gtksource4_GutterRenderer_ConnectQueueDraw(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectQueueDraw signal is emitted when the renderer needs to be redrawn. Use
// gtk_source_gutter_renderer_queue_draw() to emit this signal from an
// implementation of the SourceGutterRenderer interface.
func (renderer *GutterRenderer) ConnectQueueDraw(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(renderer, "queue-draw", false, unsafe.Pointer(C._gotk4_gtksource4_GutterRenderer_ConnectQueueDraw), f)
}

// Activate emits the SourceGutterRenderer::activate signal of the renderer.
// This is called from SourceGutter and should never have to be called manually.
//
// The function takes the following parameters:
//
//    - iter at the start of the line where the renderer is activated.
//    - area of the cell area where the renderer is activated.
//    - event that triggered the activation.
//
func (renderer *GutterRenderer) Activate(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 *C.GdkEvent                // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))
	_arg3 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event)))

	C.gtk_source_gutter_renderer_activate(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)
	runtime.KeepAlive(event)
}

// Begin: called when drawing a region begins. The region to be drawn is
// indicated by start and end. The purpose is to allow the implementation to
// precompute some state before the draw method is called for each cell.
//
// The function takes the following parameters:
//
//    - cr: #cairo_t.
//    - backgroundArea: Rectangle.
//    - cellArea: Rectangle.
//    - start: TextIter.
//    - end: TextIter.
//
func (renderer *GutterRenderer) Begin(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.cairo_t                 // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 *C.GdkRectangle            // out
	var _arg4 *C.GtkTextIter             // out
	var _arg5 *C.GtkTextIter             // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(backgroundArea)))
	_arg3 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(cellArea)))
	_arg4 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(start)))
	_arg5 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(end)))

	C.gtk_source_gutter_renderer_begin(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(backgroundArea)
	runtime.KeepAlive(cellArea)
	runtime.KeepAlive(start)
	runtime.KeepAlive(end)
}

// Draw: main renderering method. Implementations should implement this method
// to draw onto the cairo context. The background_area indicates the total area
// of the cell to be drawn. The cell_area indicates the area where content can
// be drawn (text, images, etc).
//
// The background_area is the cell_area plus the padding on each side (two times
// the SourceGutterRenderer:xpad horizontally and two times the
// SourceGutterRenderer:ypad vertically, so that the cell_area is centered
// inside background_area).
//
// The state argument indicates the current state of the renderer and should be
// taken into account to properly draw the different possible states (cursor,
// prelit, selected) if appropriate.
//
// The function takes the following parameters:
//
//    - cr: cairo render context.
//    - backgroundArea indicating the total area to be drawn.
//    - cellArea indicating the area to draw content.
//    - start: TextIter.
//    - end: TextIter.
//    - state: SourceGutterRendererState.
//
func (renderer *GutterRenderer) Draw(cr *cairo.Context, backgroundArea, cellArea *gdk.Rectangle, start, end *gtk.TextIter, state GutterRendererState) {
	var _arg0 *C.GtkSourceGutterRenderer     // out
	var _arg1 *C.cairo_t                     // out
	var _arg2 *C.GdkRectangle                // out
	var _arg3 *C.GdkRectangle                // out
	var _arg4 *C.GtkTextIter                 // out
	var _arg5 *C.GtkTextIter                 // out
	var _arg6 C.GtkSourceGutterRendererState // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(backgroundArea)))
	_arg3 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(cellArea)))
	_arg4 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(start)))
	_arg5 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(end)))
	_arg6 = C.GtkSourceGutterRendererState(state)

	C.gtk_source_gutter_renderer_draw(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(backgroundArea)
	runtime.KeepAlive(cellArea)
	runtime.KeepAlive(start)
	runtime.KeepAlive(end)
	runtime.KeepAlive(state)
}

// End: called when drawing a region of lines has ended.
func (renderer *GutterRenderer) End() {
	var _arg0 *C.GtkSourceGutterRenderer // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	C.gtk_source_gutter_renderer_end(_arg0)
	runtime.KeepAlive(renderer)
}

// Alignment: get the x-alignment and y-alignment of the gutter renderer.
//
// The function returns the following values:
//
//    - xalign (optional): return location for the x-alignment, or NULL to
//      ignore.
//    - yalign (optional): return location for the y-alignment, or NULL to
//      ignore.
//
func (renderer *GutterRenderer) Alignment() (xalign float32, yalign float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gfloat                   // in
	var _arg2 C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	C.gtk_source_gutter_renderer_get_alignment(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(renderer)

	var _xalign float32 // out
	var _yalign float32 // out

	_xalign = float32(_arg1)
	_yalign = float32(_arg2)

	return _xalign, _yalign
}

// AlignmentMode: get the alignment mode. The alignment mode describes the
// manner in which the renderer is aligned (see :xalign and :yalign).
//
// The function returns the following values:
//
//    - gutterRendererAlignmentMode: SourceGutterRendererAlignmentMode.
//
func (renderer *GutterRenderer) AlignmentMode() GutterRendererAlignmentMode {
	var _arg0 *C.GtkSourceGutterRenderer             // out
	var _cret C.GtkSourceGutterRendererAlignmentMode // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_alignment_mode(_arg0)
	runtime.KeepAlive(renderer)

	var _gutterRendererAlignmentMode GutterRendererAlignmentMode // out

	_gutterRendererAlignmentMode = GutterRendererAlignmentMode(_cret)

	return _gutterRendererAlignmentMode
}

// Background: get the background color of the renderer.
//
// The function returns the following values:
//
//    - color (optional): return value for a RGBA.
//    - ok: TRUE if the background color is set, FALSE otherwise.
//
func (renderer *GutterRenderer) Background() (*gdk.RGBA, bool) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.GdkRGBA                  // in
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_background(_arg0, &_arg1)
	runtime.KeepAlive(renderer)

	var _color *gdk.RGBA // out
	var _ok bool         // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _color, _ok
}

// Padding: get the x-padding and y-padding of the gutter renderer.
//
// The function returns the following values:
//
//    - xpad (optional): return location for the x-padding, or NULL to ignore.
//    - ypad (optional): return location for the y-padding, or NULL to ignore.
//
func (renderer *GutterRenderer) Padding() (xpad int, ypad int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // in
	var _arg2 C.gint                     // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	C.gtk_source_gutter_renderer_get_padding(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(renderer)

	var _xpad int // out
	var _ypad int // out

	_xpad = int(_arg1)
	_ypad = int(_arg2)

	return _xpad, _ypad
}

// Size: get the size of the renderer.
//
// The function returns the following values:
//
//    - gint: size of the renderer.
//
func (renderer *GutterRenderer) Size() int {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gint                     // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_size(_arg0)
	runtime.KeepAlive(renderer)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// View: get the view associated to the gutter renderer.
//
// The function returns the following values:
//
//    - textView: TextView.
//
func (renderer *GutterRenderer) View() *gtk.TextView {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret *C.GtkTextView             // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_view(_arg0)
	runtime.KeepAlive(renderer)

	var _textView *gtk.TextView // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_textView = &gtk.TextView{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Scrollable: gtk.Scrollable{
				Object: obj,
			},
		}
	}

	return _textView
}

// Visible: get whether the gutter renderer is visible.
//
// The function returns the following values:
//
//    - ok: TRUE if the renderer is visible, FALSE otherwise.
//
func (renderer *GutterRenderer) Visible() bool {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_visible(_arg0)
	runtime.KeepAlive(renderer)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WindowType: get the TextWindowType associated with the gutter renderer.
//
// The function returns the following values:
//
//    - textWindowType: TextWindowType.
//
func (renderer *GutterRenderer) WindowType() gtk.TextWindowType {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.GtkTextWindowType        // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_window_type(_arg0)
	runtime.KeepAlive(renderer)

	var _textWindowType gtk.TextWindowType // out

	_textWindowType = gtk.TextWindowType(_cret)

	return _textWindowType
}

// QueryActivatable: get whether the renderer is activatable at the location in
// event. This is called from SourceGutter to determine whether a renderer is
// activatable using the mouse pointer.
//
// The function takes the following parameters:
//
//    - iter at the start of the line to be activated.
//    - area of the cell area to be activated.
//    - event that triggered the query.
//
// The function returns the following values:
//
//    - ok: TRUE if the renderer can be activated, FALSE otherwise.
//
func (renderer *GutterRenderer) QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle, event *gdk.Event) bool {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 *C.GdkEvent                // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))
	_arg3 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C.gtk_source_gutter_renderer_query_activatable(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueryData: emit the SourceGutterRenderer::query-data signal. This function is
// called to query for data just before rendering a cell. This is called from
// the SourceGutter. Implementations can override the default signal handler or
// can connect a signal handler externally to the
// SourceGutterRenderer::query-data signal.
//
// The function takes the following parameters:
//
//    - start: TextIter.
//    - end: TextIter.
//    - state: SourceGutterRendererState.
//
func (renderer *GutterRenderer) QueryData(start, end *gtk.TextIter, state GutterRendererState) {
	var _arg0 *C.GtkSourceGutterRenderer     // out
	var _arg1 *C.GtkTextIter                 // out
	var _arg2 *C.GtkTextIter                 // out
	var _arg3 C.GtkSourceGutterRendererState // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(start)))
	_arg2 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(end)))
	_arg3 = C.GtkSourceGutterRendererState(state)

	C.gtk_source_gutter_renderer_query_data(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(start)
	runtime.KeepAlive(end)
	runtime.KeepAlive(state)
}

// QueryTooltip emits the SourceGutterRenderer::query-tooltip signal. This
// function is called from SourceGutter. Implementations can override the
// default signal handler or can connect to the signal externally.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//    - area: Rectangle.
//    - x position of the tooltip.
//    - y position of the tooltip.
//    - tooltip: Tooltip.
//
// The function returns the following values:
//
//    - ok: TRUE if the tooltip has been set, FALSE otherwise.
//
func (renderer *GutterRenderer) QueryTooltip(iter *gtk.TextIter, area *gdk.Rectangle, x, y int, tooltip *gtk.Tooltip) bool {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 C.gint                     // out
	var _arg4 C.gint                     // out
	var _arg5 *C.GtkTooltip              // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))
	_arg3 = C.gint(x)
	_arg4 = C.gint(y)
	_arg5 = (*C.GtkTooltip)(unsafe.Pointer(externglib.InternObject(tooltip).Native()))

	_cret = C.gtk_source_gutter_renderer_query_tooltip(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(tooltip)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueueDraw emits the SourceGutterRenderer::queue-draw signal of the renderer.
// Call this from an implementation to inform that the renderer has changed such
// that it needs to redraw.
func (renderer *GutterRenderer) QueueDraw() {
	var _arg0 *C.GtkSourceGutterRenderer // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))

	C.gtk_source_gutter_renderer_queue_draw(_arg0)
	runtime.KeepAlive(renderer)
}

// SetAlignment: set the alignment of the gutter renderer. Both xalign and
// yalign can be -1, which means the values will not be changed (this allows
// changing only one of the values).
//
// xalign is the horizontal alignment. Set to 0 for a left alignment. 1 for a
// right alignment. And 0.5 for centering the cells. yalign is the vertical
// alignment. Set to 0 for a top alignment. 1 for a bottom alignment.
//
// The function takes the following parameters:
//
//    - xalign: x-alignment.
//    - yalign: y-alignment.
//
func (renderer *GutterRenderer) SetAlignment(xalign, yalign float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gfloat                   // out
	var _arg2 C.gfloat                   // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)

	C.gtk_source_gutter_renderer_set_alignment(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
}

// SetAlignmentMode: set the alignment mode. The alignment mode describes the
// manner in which the renderer is aligned (see :xalign and :yalign).
//
// The function takes the following parameters:
//
//    - mode: SourceGutterRendererAlignmentMode.
//
func (renderer *GutterRenderer) SetAlignmentMode(mode GutterRendererAlignmentMode) {
	var _arg0 *C.GtkSourceGutterRenderer             // out
	var _arg1 C.GtkSourceGutterRendererAlignmentMode // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = C.GtkSourceGutterRendererAlignmentMode(mode)

	C.gtk_source_gutter_renderer_set_alignment_mode(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(mode)
}

// SetBackground: set the background color of the renderer. If color is set to
// NULL, the renderer will not have a background color.
//
// The function takes the following parameters:
//
//    - color (optional) or NULL.
//
func (renderer *GutterRenderer) SetBackground(color *gdk.RGBA) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GdkRGBA                 // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	if color != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(color)))
	}

	C.gtk_source_gutter_renderer_set_background(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(color)
}

// SetPadding: set the padding of the gutter renderer. Both xpad and ypad can be
// -1, which means the values will not be changed (this allows changing only one
// of the values).
//
// xpad is the left and right padding. ypad is the top and bottom padding.
//
// The function takes the following parameters:
//
//    - xpad: x-padding.
//    - ypad: y-padding.
//
func (renderer *GutterRenderer) SetPadding(xpad, ypad int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // out
	var _arg2 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = C.gint(xpad)
	_arg2 = C.gint(ypad)

	C.gtk_source_gutter_renderer_set_padding(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(xpad)
	runtime.KeepAlive(ypad)
}

// SetSize sets the size of the renderer. A value of -1 specifies that the size
// is to be determined dynamically.
//
// The function takes the following parameters:
//
//    - size: size.
//
func (renderer *GutterRenderer) SetSize(size int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	_arg1 = C.gint(size)

	C.gtk_source_gutter_renderer_set_size(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(size)
}

// SetVisible: set whether the gutter renderer is visible.
//
// The function takes the following parameters:
//
//    - visible: visibility.
//
func (renderer *GutterRenderer) SetVisible(visible bool) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gboolean                 // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(externglib.InternObject(renderer).Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_source_gutter_renderer_set_visible(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(visible)
}
