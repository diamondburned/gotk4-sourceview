// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

//export _gotk4_gtksource4_BufferClass_bracket_matched
func _gotk4_gtksource4_BufferClass_bracket_matched(arg0 *C.GtkSourceBuffer, arg1 *C.GtkTextIter, arg2 C.GtkSourceBracketMatchType) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[BufferOverrides](instance0)
	if overrides.BracketMatched == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected BufferOverrides.BracketMatched, got none")
	}

	var _iter *gtk.TextIter     // out
	var _state BracketMatchType // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_state = BracketMatchType(arg2)

	overrides.BracketMatched(_iter, _state)
}

//export _gotk4_gtksource4_BufferClass_redo
func _gotk4_gtksource4_BufferClass_redo(arg0 *C.GtkSourceBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[BufferOverrides](instance0)
	if overrides.Redo == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected BufferOverrides.Redo, got none")
	}

	overrides.Redo()
}

//export _gotk4_gtksource4_BufferClass_undo
func _gotk4_gtksource4_BufferClass_undo(arg0 *C.GtkSourceBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[BufferOverrides](instance0)
	if overrides.Undo == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected BufferOverrides.Undo, got none")
	}

	overrides.Undo()
}

//export _gotk4_gtksource4_CompletionClass_activate_proposal
func _gotk4_gtksource4_CompletionClass_activate_proposal(arg0 *C.GtkSourceCompletion) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.ActivateProposal == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.ActivateProposal, got none")
	}

	overrides.ActivateProposal()
}

//export _gotk4_gtksource4_CompletionClass_hide
func _gotk4_gtksource4_CompletionClass_hide(arg0 *C.GtkSourceCompletion) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.Hide == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.Hide, got none")
	}

	overrides.Hide()
}

//export _gotk4_gtksource4_CompletionClass_move_cursor
func _gotk4_gtksource4_CompletionClass_move_cursor(arg0 *C.GtkSourceCompletion, arg1 C.GtkScrollStep, arg2 C.gint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.MoveCursor == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.MoveCursor, got none")
	}

	var _step gtk.ScrollStep // out
	var _num int             // out

	_step = gtk.ScrollStep(arg1)
	_num = int(arg2)

	overrides.MoveCursor(_step, _num)
}

//export _gotk4_gtksource4_CompletionClass_move_page
func _gotk4_gtksource4_CompletionClass_move_page(arg0 *C.GtkSourceCompletion, arg1 C.GtkScrollStep, arg2 C.gint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.MovePage == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.MovePage, got none")
	}

	var _step gtk.ScrollStep // out
	var _num int             // out

	_step = gtk.ScrollStep(arg1)
	_num = int(arg2)

	overrides.MovePage(_step, _num)
}

//export _gotk4_gtksource4_CompletionClass_populate_context
func _gotk4_gtksource4_CompletionClass_populate_context(arg0 *C.GtkSourceCompletion, arg1 *C.GtkSourceCompletionContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.PopulateContext == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.PopulateContext, got none")
	}

	var _context *CompletionContext // out

	_context = wrapCompletionContext(coreglib.Take(unsafe.Pointer(arg1)))

	overrides.PopulateContext(_context)
}

//export _gotk4_gtksource4_CompletionClass_proposal_activated
func _gotk4_gtksource4_CompletionClass_proposal_activated(arg0 *C.GtkSourceCompletion, arg1 *C.GtkSourceCompletionProvider, arg2 *C.GtkSourceCompletionProposal) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.ProposalActivated == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.ProposalActivated, got none")
	}

	var _provider CompletionProviderer  // out
	var _proposal CompletionProposaller // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtksource.CompletionProviderer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CompletionProviderer)
			return ok
		})
		rv, ok := casted.(CompletionProviderer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtksource.CompletionProviderer")
		}
		_provider = rv
	}
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gtksource.CompletionProposaller is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CompletionProposaller)
			return ok
		})
		rv, ok := casted.(CompletionProposaller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtksource.CompletionProposaller")
		}
		_proposal = rv
	}

	ok := overrides.ProposalActivated(_provider, _proposal)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtksource4_CompletionClass_show
func _gotk4_gtksource4_CompletionClass_show(arg0 *C.GtkSourceCompletion) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionOverrides](instance0)
	if overrides.Show == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionOverrides.Show, got none")
	}

	overrides.Show()
}

//export _gotk4_gtksource4_CompletionContextClass_cancelled
func _gotk4_gtksource4_CompletionContextClass_cancelled(arg0 *C.GtkSourceCompletionContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[CompletionContextOverrides](instance0)
	if overrides.Cancelled == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected CompletionContextOverrides.Cancelled, got none")
	}

	overrides.Cancelled()
}

//export _gotk4_gtksource4_GutterRendererClass_activate
func _gotk4_gtksource4_GutterRendererClass_activate(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 *C.GdkEvent) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.Activate == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.Activate, got none")
	}

	var _iter *gtk.TextIter  // out
	var _area *gdk.Rectangle // out
	var _event *gdk.Event    // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer(arg3)))
		v = gdk.CopyEventer(v)
		_event = v
	}

	overrides.Activate(_iter, _area, _event)
}

//export _gotk4_gtksource4_GutterRendererClass_begin
func _gotk4_gtksource4_GutterRendererClass_begin(arg0 *C.GtkSourceGutterRenderer, arg1 *C.cairo_t, arg2 *C.GdkRectangle, arg3 *C.GdkRectangle, arg4 *C.GtkTextIter, arg5 *C.GtkTextIter) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.Begin == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.Begin, got none")
	}

	var _cr *cairo.Context             // out
	var _backgroundArea *gdk.Rectangle // out
	var _cellArea *gdk.Rectangle       // out
	var _start *gtk.TextIter           // out
	var _end *gtk.TextIter             // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.cairo_t)(unsafe.Pointer(v.Native())))
	})
	_backgroundArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_cellArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg5)))

	overrides.Begin(_cr, _backgroundArea, _cellArea, _start, _end)
}

//export _gotk4_gtksource4_GutterRendererClass_change_buffer
func _gotk4_gtksource4_GutterRendererClass_change_buffer(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.ChangeBuffer == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.ChangeBuffer, got none")
	}

	var _oldBuffer *gtk.TextBuffer // out

	if arg1 != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(arg1))
			_oldBuffer = &gtk.TextBuffer{
				Object: obj,
			}
		}
	}

	overrides.ChangeBuffer(_oldBuffer)
}

//export _gotk4_gtksource4_GutterRendererClass_change_view
func _gotk4_gtksource4_GutterRendererClass_change_view(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.ChangeView == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.ChangeView, got none")
	}

	var _oldView *gtk.TextView // out

	if arg1 != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(arg1))
			_oldView = &gtk.TextView{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
				Object: obj,
				Scrollable: gtk.Scrollable{
					Object: obj,
				},
			}
		}
	}

	overrides.ChangeView(_oldView)
}

//export _gotk4_gtksource4_GutterRendererClass_draw
func _gotk4_gtksource4_GutterRendererClass_draw(arg0 *C.GtkSourceGutterRenderer, arg1 *C.cairo_t, arg2 *C.GdkRectangle, arg3 *C.GdkRectangle, arg4 *C.GtkTextIter, arg5 *C.GtkTextIter, arg6 C.GtkSourceGutterRendererState) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.Draw == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.Draw, got none")
	}

	var _cr *cairo.Context             // out
	var _backgroundArea *gdk.Rectangle // out
	var _cellArea *gdk.Rectangle       // out
	var _start *gtk.TextIter           // out
	var _end *gtk.TextIter             // out
	var _state GutterRendererState     // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.cairo_t)(unsafe.Pointer(v.Native())))
	})
	_backgroundArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_cellArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg5)))
	_state = GutterRendererState(arg6)

	overrides.Draw(_cr, _backgroundArea, _cellArea, _start, _end, _state)
}

//export _gotk4_gtksource4_GutterRendererClass_end
func _gotk4_gtksource4_GutterRendererClass_end(arg0 *C.GtkSourceGutterRenderer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.End == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.End, got none")
	}

	overrides.End()
}

//export _gotk4_gtksource4_GutterRendererClass_query_activatable
func _gotk4_gtksource4_GutterRendererClass_query_activatable(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 *C.GdkEvent) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.QueryActivatable == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.QueryActivatable, got none")
	}

	var _iter *gtk.TextIter  // out
	var _area *gdk.Rectangle // out
	var _event *gdk.Event    // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer(arg3)))
		v = gdk.CopyEventer(v)
		_event = v
	}

	ok := overrides.QueryActivatable(_iter, _area, _event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtksource4_GutterRendererClass_query_data
func _gotk4_gtksource4_GutterRendererClass_query_data(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GtkTextIter, arg3 C.GtkSourceGutterRendererState) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.QueryData == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.QueryData, got none")
	}

	var _start *gtk.TextIter       // out
	var _end *gtk.TextIter         // out
	var _state GutterRendererState // out

	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_state = GutterRendererState(arg3)

	overrides.QueryData(_start, _end, _state)
}

//export _gotk4_gtksource4_GutterRendererClass_query_tooltip
func _gotk4_gtksource4_GutterRendererClass_query_tooltip(arg0 *C.GtkSourceGutterRenderer, arg1 *C.GtkTextIter, arg2 *C.GdkRectangle, arg3 C.gint, arg4 C.gint, arg5 *C.GtkTooltip) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.QueryTooltip == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.QueryTooltip, got none")
	}

	var _iter *gtk.TextIter   // out
	var _area *gdk.Rectangle  // out
	var _x int                // out
	var _y int                // out
	var _tooltip *gtk.Tooltip // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_x = int(arg3)
	_y = int(arg4)
	{
		obj := coreglib.Take(unsafe.Pointer(arg5))
		_tooltip = &gtk.Tooltip{
			Object: obj,
		}
	}

	ok := overrides.QueryTooltip(_iter, _area, _x, _y, _tooltip)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtksource4_GutterRendererClass_queue_draw
func _gotk4_gtksource4_GutterRendererClass_queue_draw(arg0 *C.GtkSourceGutterRenderer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[GutterRendererOverrides](instance0)
	if overrides.QueueDraw == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected GutterRendererOverrides.QueueDraw, got none")
	}

	overrides.QueueDraw()
}

//export _gotk4_gtksource4_ViewClass_line_mark_activated
func _gotk4_gtksource4_ViewClass_line_mark_activated(arg0 *C.GtkSourceView, arg1 *C.GtkTextIter, arg2 *C.GdkEvent) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[ViewOverrides](instance0)
	if overrides.LineMarkActivated == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected ViewOverrides.LineMarkActivated, got none")
	}

	var _iter *gtk.TextIter // out
	var _event *gdk.Event   // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer(arg2)))
		v = gdk.CopyEventer(v)
		_event = v
	}

	overrides.LineMarkActivated(_iter, _event)
}

//export _gotk4_gtksource4_ViewClass_move_lines
func _gotk4_gtksource4_ViewClass_move_lines(arg0 *C.GtkSourceView, arg1 C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[ViewOverrides](instance0)
	if overrides.MoveLines == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected ViewOverrides.MoveLines, got none")
	}

	var _down bool // out

	if arg1 != 0 {
		_down = true
	}

	overrides.MoveLines(_down)
}

//export _gotk4_gtksource4_ViewClass_move_words
func _gotk4_gtksource4_ViewClass_move_words(arg0 *C.GtkSourceView, arg1 C.gint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[ViewOverrides](instance0)
	if overrides.MoveWords == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected ViewOverrides.MoveWords, got none")
	}

	var _step int // out

	_step = int(arg1)

	overrides.MoveWords(_step)
}

//export _gotk4_gtksource4_ViewClass_redo
func _gotk4_gtksource4_ViewClass_redo(arg0 *C.GtkSourceView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[ViewOverrides](instance0)
	if overrides.Redo == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected ViewOverrides.Redo, got none")
	}

	overrides.Redo()
}

//export _gotk4_gtksource4_ViewClass_show_completion
func _gotk4_gtksource4_ViewClass_show_completion(arg0 *C.GtkSourceView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[ViewOverrides](instance0)
	if overrides.ShowCompletion == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected ViewOverrides.ShowCompletion, got none")
	}

	overrides.ShowCompletion()
}

//export _gotk4_gtksource4_ViewClass_undo
func _gotk4_gtksource4_ViewClass_undo(arg0 *C.GtkSourceView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[ViewOverrides](instance0)
	if overrides.Undo == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected ViewOverrides.Undo, got none")
	}

	overrides.Undo()
}

//export _gotk4_gtksource4_View_ConnectRedo
func _gotk4_gtksource4_View_ConnectRedo(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gtksource4_View_ConnectUndo
func _gotk4_gtksource4_View_ConnectUndo(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
