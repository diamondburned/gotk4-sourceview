// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern void _gotk4_gtksource4_CompletionContext_ConnectCancelled(gpointer, guintptr);
// extern void _gotk4_gtksource4_CompletionContextClass_cancelled(GtkSourceCompletionContext*);
// void _gotk4_gtksource4_CompletionContext_virtual_cancelled(void* fnptr, GtkSourceCompletionContext* arg0) {
//   ((void (*)(GtkSourceCompletionContext*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeCompletionContext = coreglib.Type(C.gtk_source_completion_context_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCompletionContext, F: marshalCompletionContext},
	})
}

// CompletionContextOverrides contains methods that are overridable.
type CompletionContextOverrides struct {
	Cancelled func()
}

func defaultCompletionContextOverrides(v *CompletionContext) CompletionContextOverrides {
	return CompletionContextOverrides{
		Cancelled: v.cancelled,
	}
}

type CompletionContext struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned
}

var ()

func init() {
	coreglib.RegisterClassInfo[*CompletionContext, *CompletionContextClass, CompletionContextOverrides](
		GTypeCompletionContext,
		initCompletionContextClass,
		wrapCompletionContext,
		defaultCompletionContextOverrides,
	)
}

func initCompletionContextClass(gclass unsafe.Pointer, overrides CompletionContextOverrides, classInitFunc func(*CompletionContextClass)) {
	pclass := (*C.GtkSourceCompletionContextClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeCompletionContext))))

	if overrides.Cancelled != nil {
		pclass.cancelled = (*[0]byte)(C._gotk4_gtksource4_CompletionContextClass_cancelled)
	}

	if classInitFunc != nil {
		class := (*CompletionContextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCompletionContext(obj *coreglib.Object) *CompletionContext {
	return &CompletionContext{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
	}
}

func marshalCompletionContext(p uintptr) (interface{}, error) {
	return wrapCompletionContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectCancelled is emitted when the current population of proposals has been
// cancelled. Providers adding proposals asynchronously should connect to this
// signal to know when to cancel running proposal queries.
func (context *CompletionContext) ConnectCancelled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "cancelled", false, unsafe.Pointer(C._gotk4_gtksource4_CompletionContext_ConnectCancelled), f)
}

// AddProposals providers can use this function to add proposals to the
// completion. They can do so asynchronously by means of the finished argument.
// Providers must ensure that they always call this function with finished
// set to TRUE once each population (even if no proposals need to be added).
// Population occurs when the gtk_source_completion_provider_populate() function
// is called.
//
// The function takes the following parameters:
//
//   - provider: SourceCompletionProvider.
//   - proposals (optional): list of proposals to add.
//   - finished: whether the provider is finished adding proposals.
//
func (context *CompletionContext) AddProposals(provider CompletionProviderer, proposals []CompletionProposaller, finished bool) {
	var _arg0 *C.GtkSourceCompletionContext  // out
	var _arg1 *C.GtkSourceCompletionProvider // out
	var _arg2 *C.GList                       // out
	var _arg3 C.gboolean                     // out

	_arg0 = (*C.GtkSourceCompletionContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GtkSourceCompletionProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	if proposals != nil {
		for i := len(proposals) - 1; i >= 0; i-- {
			src := proposals[i]
			var dst *C.GtkSourceCompletionProposal // out
			dst = (*C.GtkSourceCompletionProposal)(unsafe.Pointer(coreglib.InternObject(src).Native()))
			_arg2 = C.g_list_prepend(_arg2, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_list_free(_arg2)
	}
	if finished {
		_arg3 = C.TRUE
	}

	C.gtk_source_completion_context_add_proposals(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(proposals)
	runtime.KeepAlive(finished)
}

// Activation: get the context activation.
//
// The function returns the following values:
//
//   - completionActivation: context activation.
//
func (context *CompletionContext) Activation() CompletionActivation {
	var _arg0 *C.GtkSourceCompletionContext   // out
	var _cret C.GtkSourceCompletionActivation // in

	_arg0 = (*C.GtkSourceCompletionContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_source_completion_context_get_activation(_arg0)
	runtime.KeepAlive(context)

	var _completionActivation CompletionActivation // out

	_completionActivation = CompletionActivation(_cret)

	return _completionActivation
}

// Iter: get the iter at which the completion was invoked. Providers can use
// this to determine how and if to match proposals.
//
// The function returns the following values:
//
//   - iter: TextIter.
//   - ok: TRUE if iter is correctly set, FALSE otherwise.
//
func (context *CompletionContext) Iter() (*gtk.TextIter, bool) {
	var _arg0 *C.GtkSourceCompletionContext // out
	var _arg1 C.GtkTextIter                 // in
	var _cret C.gboolean                    // in

	_arg0 = (*C.GtkSourceCompletionContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_source_completion_context_get_iter(_arg0, &_arg1)
	runtime.KeepAlive(context)

	var _iter *gtk.TextIter // out
	var _ok bool            // out

	_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _iter, _ok
}

func (context *CompletionContext) cancelled() {
	gclass := (*C.GtkSourceCompletionContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.cancelled

	var _arg0 *C.GtkSourceCompletionContext // out

	_arg0 = (*C.GtkSourceCompletionContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtksource4_CompletionContext_virtual_cancelled(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// CompletionContextClass: instance of this type is always passed by reference.
type CompletionContextClass struct {
	*completionContextClass
}

// completionContextClass is the struct that's finalized.
type completionContextClass struct {
	native *C.GtkSourceCompletionContextClass
}

func (c *CompletionContextClass) Padding() [10]unsafe.Pointer {
	valptr := &c.native.padding
	var _v [10]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 10; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
