// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// GtkSourceStyleScheme* _gotk4_gtksource4_StyleSchemeChooser_virtual_get_style_scheme(void* fnptr, GtkSourceStyleSchemeChooser* arg0) {
//   return ((GtkSourceStyleScheme* (*)(GtkSourceStyleSchemeChooser*))(fnptr))(arg0);
// };
// void _gotk4_gtksource4_StyleSchemeChooser_virtual_set_style_scheme(void* fnptr, GtkSourceStyleSchemeChooser* arg0, GtkSourceStyleScheme* arg1) {
//   ((void (*)(GtkSourceStyleSchemeChooser*, GtkSourceStyleScheme*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeStyleSchemeChooser = coreglib.Type(C.gtk_source_style_scheme_chooser_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStyleSchemeChooser, F: marshalStyleSchemeChooser},
	})
}

//
// StyleSchemeChooser wraps an interface. This means the user can get the
// underlying type by calling Cast().
type StyleSchemeChooser struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*StyleSchemeChooser)(nil)
)

// StyleSchemeChooserer describes StyleSchemeChooser's interface methods.
type StyleSchemeChooserer interface {
	coreglib.Objector

	// StyleScheme gets the currently-selected scheme.
	StyleScheme() *StyleScheme
	// SetStyleScheme sets the scheme.
	SetStyleScheme(scheme *StyleScheme)
}

var _ StyleSchemeChooserer = (*StyleSchemeChooser)(nil)

func wrapStyleSchemeChooser(obj *coreglib.Object) *StyleSchemeChooser {
	return &StyleSchemeChooser{
		Object: obj,
	}
}

func marshalStyleSchemeChooser(p uintptr) (interface{}, error) {
	return wrapStyleSchemeChooser(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// StyleScheme gets the currently-selected scheme.
//
// The function returns the following values:
//
//   - styleScheme: currently-selected scheme.
//
func (chooser *StyleSchemeChooser) StyleScheme() *StyleScheme {
	var _arg0 *C.GtkSourceStyleSchemeChooser // out
	var _cret *C.GtkSourceStyleScheme        // in

	_arg0 = (*C.GtkSourceStyleSchemeChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_source_style_scheme_chooser_get_style_scheme(_arg0)
	runtime.KeepAlive(chooser)

	var _styleScheme *StyleScheme // out

	_styleScheme = wrapStyleScheme(coreglib.Take(unsafe.Pointer(_cret)))

	return _styleScheme
}

// SetStyleScheme sets the scheme.
//
// The function takes the following parameters:
//
//   - scheme: SourceStyleScheme.
//
func (chooser *StyleSchemeChooser) SetStyleScheme(scheme *StyleScheme) {
	var _arg0 *C.GtkSourceStyleSchemeChooser // out
	var _arg1 *C.GtkSourceStyleScheme        // out

	_arg0 = (*C.GtkSourceStyleSchemeChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(coreglib.InternObject(scheme).Native()))

	C.gtk_source_style_scheme_chooser_set_style_scheme(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(scheme)
}

// styleScheme gets the currently-selected scheme.
//
// The function returns the following values:
//
//   - styleScheme: currently-selected scheme.
//
func (chooser *StyleSchemeChooser) styleScheme() *StyleScheme {
	gclass := (*C.GtkSourceStyleSchemeChooserInterface)(coreglib.PeekParentClass(chooser))
	fnarg := gclass.get_style_scheme

	var _arg0 *C.GtkSourceStyleSchemeChooser // out
	var _cret *C.GtkSourceStyleScheme        // in

	_arg0 = (*C.GtkSourceStyleSchemeChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C._gotk4_gtksource4_StyleSchemeChooser_virtual_get_style_scheme(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(chooser)

	var _styleScheme *StyleScheme // out

	_styleScheme = wrapStyleScheme(coreglib.Take(unsafe.Pointer(_cret)))

	return _styleScheme
}

// setStyleScheme sets the scheme.
//
// The function takes the following parameters:
//
//   - scheme: SourceStyleScheme.
//
func (chooser *StyleSchemeChooser) setStyleScheme(scheme *StyleScheme) {
	gclass := (*C.GtkSourceStyleSchemeChooserInterface)(coreglib.PeekParentClass(chooser))
	fnarg := gclass.set_style_scheme

	var _arg0 *C.GtkSourceStyleSchemeChooser // out
	var _arg1 *C.GtkSourceStyleScheme        // out

	_arg0 = (*C.GtkSourceStyleSchemeChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(coreglib.InternObject(scheme).Native()))

	C._gotk4_gtksource4_StyleSchemeChooser_virtual_set_style_scheme(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(scheme)
}

// StyleSchemeChooserInterface: instance of this type is always passed by
// reference.
type StyleSchemeChooserInterface struct {
	*styleSchemeChooserInterface
}

// styleSchemeChooserInterface is the struct that's finalized.
type styleSchemeChooserInterface struct {
	native *C.GtkSourceStyleSchemeChooserInterface
}

func (s *StyleSchemeChooserInterface) Padding() [12]unsafe.Pointer {
	valptr := &s.native.padding
	var _v [12]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 12; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
