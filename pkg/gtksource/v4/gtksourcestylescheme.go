// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// glib.Type values for gtksourcestylescheme.go.
var GTypeStyleScheme = externglib.Type(C.gtk_source_style_scheme_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeStyleScheme, F: marshalStyleScheme},
	})
}

// StyleSchemeOverrider contains methods that are overridable.
type StyleSchemeOverrider interface {
}

type StyleScheme struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*StyleScheme)(nil)
)

func classInitStyleSchemer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapStyleScheme(obj *externglib.Object) *StyleScheme {
	return &StyleScheme{
		Object: obj,
	}
}

func marshalStyleScheme(p uintptr) (interface{}, error) {
	return wrapStyleScheme(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - utf8s (optional): a NULL-terminated array containing the scheme authors
//      or NULL if no author is specified by the style scheme.
//
func (scheme *StyleScheme) Authors() []string {
	var _arg0 *C.GtkSourceStyleScheme // out
	var _cret **C.gchar               // in

	_arg0 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(externglib.InternObject(scheme).Native()))

	_cret = C.gtk_source_style_scheme_get_authors(_arg0)
	runtime.KeepAlive(scheme)

	var _utf8s []string // out

	if _cret != nil {
		{
			var i int
			var z *C.gchar
			for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
				i++
			}

			src := unsafe.Slice(_cret, i)
			_utf8s = make([]string, i)
			for i := range src {
				_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			}
		}
	}

	return _utf8s
}

// The function returns the following values:
//
//    - utf8 (optional): scheme description (if defined), or NULL.
//
func (scheme *StyleScheme) Description() string {
	var _arg0 *C.GtkSourceStyleScheme // out
	var _cret *C.gchar                // in

	_arg0 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(externglib.InternObject(scheme).Native()))

	_cret = C.gtk_source_style_scheme_get_description(_arg0)
	runtime.KeepAlive(scheme)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function returns the following values:
//
//    - utf8 (optional): scheme file name if the scheme was created parsing a
//      style scheme file or NULL in the other cases.
//
func (scheme *StyleScheme) Filename() string {
	var _arg0 *C.GtkSourceStyleScheme // out
	var _cret *C.gchar                // in

	_arg0 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(externglib.InternObject(scheme).Native()))

	_cret = C.gtk_source_style_scheme_get_filename(_arg0)
	runtime.KeepAlive(scheme)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function returns the following values:
//
//    - utf8: scheme id.
//
func (scheme *StyleScheme) ID() string {
	var _arg0 *C.GtkSourceStyleScheme // out
	var _cret *C.gchar                // in

	_arg0 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(externglib.InternObject(scheme).Native()))

	_cret = C.gtk_source_style_scheme_get_id(_arg0)
	runtime.KeepAlive(scheme)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - utf8: scheme name.
//
func (scheme *StyleScheme) Name() string {
	var _arg0 *C.GtkSourceStyleScheme // out
	var _cret *C.gchar                // in

	_arg0 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(externglib.InternObject(scheme).Native()))

	_cret = C.gtk_source_style_scheme_get_name(_arg0)
	runtime.KeepAlive(scheme)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
//    - styleId: id of the style to retrieve.
//
// The function returns the following values:
//
//    - style (optional) which corresponds to style_id in the scheme, or NULL
//      when no style with this name found. It is owned by scheme and may not be
//      unref'ed.
//
func (scheme *StyleScheme) Style(styleId string) *Style {
	var _arg0 *C.GtkSourceStyleScheme // out
	var _arg1 *C.gchar                // out
	var _cret *C.GtkSourceStyle       // in

	_arg0 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(externglib.InternObject(scheme).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(styleId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_source_style_scheme_get_style(_arg0, _arg1)
	runtime.KeepAlive(scheme)
	runtime.KeepAlive(styleId)

	var _style *Style // out

	if _cret != nil {
		_style = wrapStyle(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _style
}
