// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

// RegionIter is an opaque datatype; ignore all its fields. Initialize the iter
// with gtk_source_region_get_start_region_iter().
//
// An instance of this type is always passed by reference.
type RegionIter struct {
	*regionIter
}

// regionIter is the struct that's finalized.
type regionIter struct {
	native *C.GtkSourceRegionIter
}

// Subregion gets the subregion at this iterator.
//
// The function returns the following values:
//
//   - start (optional): iterator to initialize with the subregion start,
//     or NULL.
//   - end (optional): iterator to initialize with the subregion end, or NULL.
//   - ok: TRUE if start and end have been set successfully (if non-NULL),
//     or FALSE if iter is the end iterator or if the region is empty.
//
func (iter *RegionIter) Subregion() (start *gtk.TextIter, end *gtk.TextIter, ok bool) {
	var _arg0 *C.GtkSourceRegionIter // out
	var _arg1 C.GtkTextIter          // in
	var _arg2 C.GtkTextIter          // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkSourceRegionIter)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = C.gtk_source_region_iter_get_subregion(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(iter)

	var _start *gtk.TextIter // out
	var _end *gtk.TextIter   // out
	var _ok bool             // out

	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	if _cret != 0 {
		_ok = true
	}

	return _start, _end, _ok
}

// The function returns the following values:
//
//   - ok: whether iter is the end iterator.
//
func (iter *RegionIter) IsEnd() bool {
	var _arg0 *C.GtkSourceRegionIter // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkSourceRegionIter)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = C.gtk_source_region_iter_is_end(_arg0)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Next moves iter to the next subregion.
//
// The function returns the following values:
//
//   - ok: TRUE if iter moved and is dereferenceable, or FALSE if iter has been
//     set to the end iterator.
//
func (iter *RegionIter) Next() bool {
	var _arg0 *C.GtkSourceRegionIter // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkSourceRegionIter)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = C.gtk_source_region_iter_next(_arg0)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
