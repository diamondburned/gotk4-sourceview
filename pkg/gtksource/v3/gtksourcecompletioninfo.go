// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_completion_info_get_type()), F: marshalCompletionInfor},
	})
}

// CompletionInfoOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type CompletionInfoOverrider interface {
	BeforeShow()
}

type CompletionInfo struct {
	_ [0]func() // equal guard
	gtk.Window
}

var (
	_ gtk.Binner = (*CompletionInfo)(nil)
)

func wrapCompletionInfo(obj *externglib.Object) *CompletionInfo {
	return &CompletionInfo{
		Window: gtk.Window{
			Bin: gtk.Bin{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalCompletionInfor(p uintptr) (interface{}, error) {
	return wrapCompletionInfo(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectBeforeShow: this signal is emitted before any "show" management. You
// can connect to this signal if you want to change some properties or position
// before the real "show".
func (info *CompletionInfo) ConnectBeforeShow(f func()) externglib.SignalHandle {
	return info.Connect("before-show", f)
}

// The function returns the following values:
//
//    - completionInfo: new GtkSourceCompletionInfo.
//
func NewCompletionInfo() *CompletionInfo {
	var _cret *C.GtkSourceCompletionInfo // in

	_cret = C.gtk_source_completion_info_new()

	var _completionInfo *CompletionInfo // out

	_completionInfo = wrapCompletionInfo(externglib.Take(unsafe.Pointer(_cret)))

	return _completionInfo
}

// Widget: get the current content widget.
//
// Deprecated: Use gtk_bin_get_child() instead.
//
// The function returns the following values:
//
//    - widget: current content widget.
//
func (info *CompletionInfo) Widget() gtk.Widgetter {
	var _arg0 *C.GtkSourceCompletionInfo // out
	var _cret *C.GtkWidget               // in

	_arg0 = (*C.GtkSourceCompletionInfo)(unsafe.Pointer(info.Native()))

	_cret = C.gtk_source_completion_info_get_widget(_arg0)
	runtime.KeepAlive(info)

	var _widget gtk.Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gtk.Widgetter)
			return ok
		})
		rv, ok := casted.(gtk.Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// MoveToIter moves the SourceCompletionInfo to iter. If iter is NULL info is
// moved to the cursor position. Moving will respect the Gravity setting of the
// info window and will ensure the line at iter is not occluded by the window.
//
// The function takes the following parameters:
//
//    - view on which the info window should be positioned.
//    - iter (optional): TextIter.
//
func (info *CompletionInfo) MoveToIter(view *gtk.TextView, iter *gtk.TextIter) {
	var _arg0 *C.GtkSourceCompletionInfo // out
	var _arg1 *C.GtkTextView             // out
	var _arg2 *C.GtkTextIter             // out

	_arg0 = (*C.GtkSourceCompletionInfo)(unsafe.Pointer(info.Native()))
	_arg1 = (*C.GtkTextView)(unsafe.Pointer(view.Native()))
	if iter != nil {
		_arg2 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	}

	C.gtk_source_completion_info_move_to_iter(_arg0, _arg1, _arg2)
	runtime.KeepAlive(info)
	runtime.KeepAlive(view)
	runtime.KeepAlive(iter)
}

// SetWidget sets the content widget of the info window. See that the previous
// widget will lose a reference and it can be destroyed, so if you do not want
// this to happen you must use g_object_ref() before calling this method.
//
// Deprecated: Use gtk_container_add() instead. If there is already a child
// widget, remove it with gtk_container_remove().
//
// The function takes the following parameters:
//
//    - widget (optional): Widget.
//
func (info *CompletionInfo) SetWidget(widget gtk.Widgetter) {
	var _arg0 *C.GtkSourceCompletionInfo // out
	var _arg1 *C.GtkWidget               // out

	_arg0 = (*C.GtkSourceCompletionInfo)(unsafe.Pointer(info.Native()))
	if widget != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	}

	C.gtk_source_completion_info_set_widget(_arg0, _arg1)
	runtime.KeepAlive(info)
	runtime.KeepAlive(widget)
}
