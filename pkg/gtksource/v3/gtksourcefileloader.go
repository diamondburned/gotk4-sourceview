// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// GType values.
var (
	GTypeFileLoaderError = coreglib.Type(C.gtk_source_file_loader_error_get_type())
	GTypeFileLoader      = coreglib.Type(C.gtk_source_file_loader_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileLoaderError, F: marshalFileLoaderError},
		coreglib.TypeMarshaler{T: GTypeFileLoader, F: marshalFileLoader},
	})
}

// FileLoaderError: error code used with the GTK_SOURCE_FILE_LOADER_ERROR
// domain.
type FileLoaderError C.gint

const (
	// SourceFileLoaderErrorTooBig: file is too big.
	SourceFileLoaderErrorTooBig FileLoaderError = iota
	// SourceFileLoaderErrorEncodingAutoDetectionFailed: it is not possible to
	// detect the encoding automatically.
	SourceFileLoaderErrorEncodingAutoDetectionFailed
	// SourceFileLoaderErrorConversionFallback: there was an encoding conversion
	// error and it was needed to use a fallback character.
	SourceFileLoaderErrorConversionFallback
)

func marshalFileLoaderError(p uintptr) (interface{}, error) {
	return FileLoaderError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileLoaderError.
func (f FileLoaderError) String() string {
	switch f {
	case SourceFileLoaderErrorTooBig:
		return "TooBig"
	case SourceFileLoaderErrorEncodingAutoDetectionFailed:
		return "EncodingAutoDetectionFailed"
	case SourceFileLoaderErrorConversionFallback:
		return "ConversionFallback"
	default:
		return fmt.Sprintf("FileLoaderError(%d)", f)
	}
}

// FileLoaderOverrides contains methods that are overridable.
type FileLoaderOverrides struct {
}

func defaultFileLoaderOverrides(v *FileLoader) FileLoaderOverrides {
	return FileLoaderOverrides{}
}

type FileLoader struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FileLoader)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FileLoader, *FileLoaderClass, FileLoaderOverrides](
		GTypeFileLoader,
		initFileLoaderClass,
		wrapFileLoader,
		defaultFileLoaderOverrides,
	)
}

func initFileLoaderClass(gclass unsafe.Pointer, overrides FileLoaderOverrides, classInitFunc func(*FileLoaderClass)) {
	if classInitFunc != nil {
		class := (*FileLoaderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFileLoader(obj *coreglib.Object) *FileLoader {
	return &FileLoader{
		Object: obj,
	}
}

func marshalFileLoader(p uintptr) (interface{}, error) {
	return wrapFileLoader(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFileLoader creates a new SourceFileLoader object. The contents
// is read from the SourceFile's location. If not already done, call
// gtk_source_file_set_location() before calling this constructor. The previous
// location is anyway not needed, because as soon as the file loading begins,
// the buffer is emptied.
//
// The function takes the following parameters:
//
//   - buffer to load the contents into.
//   - file: SourceFile.
//
// The function returns the following values:
//
//   - fileLoader: new SourceFileLoader object.
//
func NewFileLoader(buffer *Buffer, file *File) *FileLoader {
	var _arg1 *C.GtkSourceBuffer     // out
	var _arg2 *C.GtkSourceFile       // out
	var _cret *C.GtkSourceFileLoader // in

	_arg1 = (*C.GtkSourceBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))
	_arg2 = (*C.GtkSourceFile)(unsafe.Pointer(coreglib.InternObject(file).Native()))

	_cret = C.gtk_source_file_loader_new(_arg1, _arg2)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(file)

	var _fileLoader *FileLoader // out

	_fileLoader = wrapFileLoader(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _fileLoader
}

// NewFileLoaderFromStream creates a new SourceFileLoader object. The contents
// is read from stream.
//
// The function takes the following parameters:
//
//   - buffer to load the contents into.
//   - file: SourceFile.
//   - stream to load, e.g. stdin.
//
// The function returns the following values:
//
//   - fileLoader: new SourceFileLoader object.
//
func NewFileLoaderFromStream(buffer *Buffer, file *File, stream gio.InputStreamer) *FileLoader {
	var _arg1 *C.GtkSourceBuffer     // out
	var _arg2 *C.GtkSourceFile       // out
	var _arg3 *C.GInputStream        // out
	var _cret *C.GtkSourceFileLoader // in

	_arg1 = (*C.GtkSourceBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))
	_arg2 = (*C.GtkSourceFile)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	_arg3 = (*C.GInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))

	_cret = C.gtk_source_file_loader_new_from_stream(_arg1, _arg2, _arg3)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(file)
	runtime.KeepAlive(stream)

	var _fileLoader *FileLoader // out

	_fileLoader = wrapFileLoader(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _fileLoader
}

// The function returns the following values:
//
//   - buffer to load the contents into.
//
func (loader *FileLoader) Buffer() *Buffer {
	var _arg0 *C.GtkSourceFileLoader // out
	var _cret *C.GtkSourceBuffer     // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_buffer(_arg0)
	runtime.KeepAlive(loader)

	var _buffer *Buffer // out

	_buffer = wrapBuffer(coreglib.Take(unsafe.Pointer(_cret)))

	return _buffer
}

// The function returns the following values:
//
//   - compressionType: detected compression type.
//
func (loader *FileLoader) CompressionType() CompressionType {
	var _arg0 *C.GtkSourceFileLoader     // out
	var _cret C.GtkSourceCompressionType // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_compression_type(_arg0)
	runtime.KeepAlive(loader)

	var _compressionType CompressionType // out

	_compressionType = CompressionType(_cret)

	return _compressionType
}

// The function returns the following values:
//
//   - encoding: detected file encoding.
//
func (loader *FileLoader) Encoding() *Encoding {
	var _arg0 *C.GtkSourceFileLoader // out
	var _cret *C.GtkSourceEncoding   // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_encoding(_arg0)
	runtime.KeepAlive(loader)

	var _encoding *Encoding // out

	_encoding = (*Encoding)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _encoding
}

// The function returns the following values:
//
//   - file: SourceFile.
//
func (loader *FileLoader) File() *File {
	var _arg0 *C.GtkSourceFileLoader // out
	var _cret *C.GtkSourceFile       // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_file(_arg0)
	runtime.KeepAlive(loader)

	var _file *File // out

	_file = wrapFile(coreglib.Take(unsafe.Pointer(_cret)))

	return _file
}

// The function returns the following values:
//
//   - inputStream (optional) to load, or NULL if a #GFile is used.
//
func (loader *FileLoader) InputStream() gio.InputStreamer {
	var _arg0 *C.GtkSourceFileLoader // out
	var _cret *C.GInputStream        // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_input_stream(_arg0)
	runtime.KeepAlive(loader)

	var _inputStream gio.InputStreamer // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gio.InputStreamer)
				return ok
			})
			rv, ok := casted.(gio.InputStreamer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
			}
			_inputStream = rv
		}
	}

	return _inputStream
}

// The function returns the following values:
//
//   - file (optional) to load, or NULL if an input stream is used.
//
func (loader *FileLoader) Location() *gio.File {
	var _arg0 *C.GtkSourceFileLoader // out
	var _cret *C.GFile               // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_location(_arg0)
	runtime.KeepAlive(loader)

	var _file *gio.File // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_file = &gio.File{
				Object: obj,
			}
		}
	}

	return _file
}

// The function returns the following values:
//
//   - newlineType: detected newline type.
//
func (loader *FileLoader) NewlineType() NewlineType {
	var _arg0 *C.GtkSourceFileLoader // out
	var _cret C.GtkSourceNewlineType // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))

	_cret = C.gtk_source_file_loader_get_newline_type(_arg0)
	runtime.KeepAlive(loader)

	var _newlineType NewlineType // out

	_newlineType = NewlineType(_cret)

	return _newlineType
}

// LoadFinish finishes a file loading started with
// gtk_source_file_loader_load_async().
//
// If the contents has been loaded, the following SourceFile properties will be
// updated: the location, the encoding, the newline type and the compression
// type.
//
// The function takes the following parameters:
//
//   - result: Result.
//
func (loader *FileLoader) LoadFinish(result gio.AsyncResulter) error {
	var _arg0 *C.GtkSourceFileLoader // out
	var _arg1 *C.GAsyncResult        // out
	var _cerr *C.GError              // in

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	C.gtk_source_file_loader_load_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(loader)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetCandidateEncodings sets the candidate encodings for the file loading.
// The encodings are tried in the same order as the list.
//
// For convenience, candidate_encodings can contain duplicates. Only the first
// occurrence of a duplicated encoding is kept in the list.
//
// By default the candidate encodings are (in that order in the
// list): 1. If set, the SourceFile's encoding as returned by
// gtk_source_file_get_encoding(). 2. The default candidates as returned by
// gtk_source_encoding_get_default_candidates().
//
// The function takes the following parameters:
//
//   - candidateEncodings: list of SourceEncoding<!-- -->s.
//
func (loader *FileLoader) SetCandidateEncodings(candidateEncodings []*Encoding) {
	var _arg0 *C.GtkSourceFileLoader // out
	var _arg1 *C.GSList              // out

	_arg0 = (*C.GtkSourceFileLoader)(unsafe.Pointer(coreglib.InternObject(loader).Native()))
	for i := len(candidateEncodings) - 1; i >= 0; i-- {
		src := candidateEncodings[i]
		var dst *C.GtkSourceEncoding // out
		dst = (*C.GtkSourceEncoding)(gextras.StructNative(unsafe.Pointer(src)))
		_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
	}
	defer C.g_slist_free(_arg1)

	C.gtk_source_file_loader_set_candidate_encodings(_arg0, _arg1)
	runtime.KeepAlive(loader)
	runtime.KeepAlive(candidateEncodings)
}

// FileLoaderClass: instance of this type is always passed by reference.
type FileLoaderClass struct {
	*fileLoaderClass
}

// fileLoaderClass is the struct that's finalized.
type fileLoaderClass struct {
	native *C.GtkSourceFileLoaderClass
}

func (f *FileLoaderClass) Padding() [10]unsafe.Pointer {
	valptr := &f.native.padding
	var _v [10]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 10; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
