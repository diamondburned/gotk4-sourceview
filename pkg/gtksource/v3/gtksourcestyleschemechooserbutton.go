// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// GType values.
var (
	GTypeStyleSchemeChooserButton = coreglib.Type(C.gtk_source_style_scheme_chooser_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStyleSchemeChooserButton, F: marshalStyleSchemeChooserButton},
	})
}

// StyleSchemeChooserButtonOverrides contains methods that are overridable.
type StyleSchemeChooserButtonOverrides struct {
}

func defaultStyleSchemeChooserButtonOverrides(v *StyleSchemeChooserButton) StyleSchemeChooserButtonOverrides {
	return StyleSchemeChooserButtonOverrides{}
}

type StyleSchemeChooserButton struct {
	_ [0]func() // equal guard
	gtk.Button

	*coreglib.Object
	StyleSchemeChooser
}

var (
	_ coreglib.Objector = (*StyleSchemeChooserButton)(nil)
	_ gtk.Binner        = (*StyleSchemeChooserButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StyleSchemeChooserButton, *StyleSchemeChooserButtonClass, StyleSchemeChooserButtonOverrides](
		GTypeStyleSchemeChooserButton,
		initStyleSchemeChooserButtonClass,
		wrapStyleSchemeChooserButton,
		defaultStyleSchemeChooserButtonOverrides,
	)
}

func initStyleSchemeChooserButtonClass(gclass unsafe.Pointer, overrides StyleSchemeChooserButtonOverrides, classInitFunc func(*StyleSchemeChooserButtonClass)) {
	if classInitFunc != nil {
		class := (*StyleSchemeChooserButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStyleSchemeChooserButton(obj *coreglib.Object) *StyleSchemeChooserButton {
	return &StyleSchemeChooserButton{
		Button: gtk.Button{
			Bin: gtk.Bin{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: gtk.Actionable{
				Widget: gtk.Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Activatable: gtk.Activatable{
				Object: obj,
			},
		},
		Object: obj,
		StyleSchemeChooser: StyleSchemeChooser{
			Object: obj,
		},
	}
}

func marshalStyleSchemeChooserButton(p uintptr) (interface{}, error) {
	return wrapStyleSchemeChooserButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewStyleSchemeChooserButton creates a new SourceStyleSchemeChooserButton.
//
// The function returns the following values:
//
//   - styleSchemeChooserButton: new SourceStyleSchemeChooserButton.
//
func NewStyleSchemeChooserButton() *StyleSchemeChooserButton {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_source_style_scheme_chooser_button_new()

	var _styleSchemeChooserButton *StyleSchemeChooserButton // out

	_styleSchemeChooserButton = wrapStyleSchemeChooserButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _styleSchemeChooserButton
}

// StyleSchemeChooserButtonClass: instance of this type is always passed by
// reference.
type StyleSchemeChooserButtonClass struct {
	*styleSchemeChooserButtonClass
}

// styleSchemeChooserButtonClass is the struct that's finalized.
type styleSchemeChooserButtonClass struct {
	native *C.GtkSourceStyleSchemeChooserButtonClass
}

func (s *StyleSchemeChooserButtonClass) Parent() *gtk.ButtonClass {
	valptr := &s.native.parent
	var _v *gtk.ButtonClass // out
	_v = (*gtk.ButtonClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
