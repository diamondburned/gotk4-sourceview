// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// GType values.
var (
	GTypeGutterRendererText = coreglib.Type(C.gtk_source_gutter_renderer_text_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGutterRendererText, F: marshalGutterRendererText},
	})
}

// GutterRendererTextOverrides contains methods that are overridable.
type GutterRendererTextOverrides struct {
}

func defaultGutterRendererTextOverrides(v *GutterRendererText) GutterRendererTextOverrides {
	return GutterRendererTextOverrides{}
}

type GutterRendererText struct {
	_ [0]func() // equal guard
	GutterRenderer
}

var (
	_ GutterRendererer = (*GutterRendererText)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GutterRendererText, *GutterRendererTextClass, GutterRendererTextOverrides](
		GTypeGutterRendererText,
		initGutterRendererTextClass,
		wrapGutterRendererText,
		defaultGutterRendererTextOverrides,
	)
}

func initGutterRendererTextClass(gclass unsafe.Pointer, overrides GutterRendererTextOverrides, classInitFunc func(*GutterRendererTextClass)) {
	if classInitFunc != nil {
		class := (*GutterRendererTextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGutterRendererText(obj *coreglib.Object) *GutterRendererText {
	return &GutterRendererText{
		GutterRenderer: GutterRenderer{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalGutterRendererText(p uintptr) (interface{}, error) {
	return wrapGutterRendererText(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewGutterRendererText: create a new SourceGutterRendererText.
//
// The function returns the following values:
//
//   - gutterRendererText: SourceGutterRenderer.
//
func NewGutterRendererText() *GutterRendererText {
	var _cret *C.GtkSourceGutterRenderer // in

	_cret = C.gtk_source_gutter_renderer_text_new()

	var _gutterRendererText *GutterRendererText // out

	_gutterRendererText = wrapGutterRendererText(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _gutterRendererText
}

// Measure measures the text provided using the pango layout used by the
// SourceGutterRendererText.
//
// The function takes the following parameters:
//
//   - text to measure.
//
// The function returns the following values:
//
//   - width (optional): location to store the width of the text in pixels,
//     or NULL.
//   - height (optional): location to store the height of the text in pixels,
//     or NULL.
//
func (renderer *GutterRendererText) Measure(text string) (width, height int) {
	var _arg0 *C.GtkSourceGutterRendererText // out
	var _arg1 *C.gchar                       // out
	var _arg2 C.gint                         // in
	var _arg3 C.gint                         // in

	_arg0 = (*C.GtkSourceGutterRendererText)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_gutter_renderer_text_measure(_arg0, _arg1, &_arg2, &_arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(text)

	var _width int  // out
	var _height int // out

	_width = int(_arg2)
	_height = int(_arg3)

	return _width, _height
}

// MeasureMarkup measures the pango markup provided using the pango layout used
// by the SourceGutterRendererText.
//
// The function takes the following parameters:
//
//   - markup: pango markup to measure.
//
// The function returns the following values:
//
//   - width (optional): location to store the width of the text in pixels,
//     or NULL.
//   - height (optional): location to store the height of the text in pixels,
//     or NULL.
//
func (renderer *GutterRendererText) MeasureMarkup(markup string) (width, height int) {
	var _arg0 *C.GtkSourceGutterRendererText // out
	var _arg1 *C.gchar                       // out
	var _arg2 C.gint                         // in
	var _arg3 C.gint                         // in

	_arg0 = (*C.GtkSourceGutterRendererText)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_gutter_renderer_text_measure_markup(_arg0, _arg1, &_arg2, &_arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(markup)

	var _width int  // out
	var _height int // out

	_width = int(_arg2)
	_height = int(_arg3)

	return _width, _height
}

// The function takes the following parameters:
//
//   - markup
//   - length
//
func (renderer *GutterRendererText) SetMarkup(markup string, length int) {
	var _arg0 *C.GtkSourceGutterRendererText // out
	var _arg1 *C.gchar                       // out
	var _arg2 C.gint                         // out

	_arg0 = (*C.GtkSourceGutterRendererText)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(length)

	C.gtk_source_gutter_renderer_text_set_markup(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(markup)
	runtime.KeepAlive(length)
}

// The function takes the following parameters:
//
//   - text
//   - length
//
func (renderer *GutterRendererText) SetText(text string, length int) {
	var _arg0 *C.GtkSourceGutterRendererText // out
	var _arg1 *C.gchar                       // out
	var _arg2 C.gint                         // out

	_arg0 = (*C.GtkSourceGutterRendererText)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(length)

	C.gtk_source_gutter_renderer_text_set_text(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(text)
	runtime.KeepAlive(length)
}

// GutterRendererTextClass: instance of this type is always passed by reference.
type GutterRendererTextClass struct {
	*gutterRendererTextClass
}

// gutterRendererTextClass is the struct that's finalized.
type gutterRendererTextClass struct {
	native *C.GtkSourceGutterRendererTextClass
}
