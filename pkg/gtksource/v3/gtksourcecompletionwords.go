// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// glib.Type values for gtksourcecompletionwords.go.
var GTypeCompletionWords = externglib.Type(C.gtk_source_completion_words_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeCompletionWords, F: marshalCompletionWords},
	})
}

// CompletionWordsOverrider contains methods that are overridable.
type CompletionWordsOverrider interface {
}

type CompletionWords struct {
	_ [0]func() // equal guard
	*externglib.Object

	CompletionProvider
}

var (
	_ externglib.Objector = (*CompletionWords)(nil)
)

func classInitCompletionWordser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCompletionWords(obj *externglib.Object) *CompletionWords {
	return &CompletionWords{
		Object: obj,
		CompletionProvider: CompletionProvider{
			Object: obj,
		},
	}
}

func marshalCompletionWords(p uintptr) (interface{}, error) {
	return wrapCompletionWords(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//    - name (optional) for the provider, or NULL.
//    - icon (optional): specific icon for the provider, or NULL.
//
// The function returns the following values:
//
//    - completionWords: new SourceCompletionWords provider.
//
func NewCompletionWords(name string, icon *gdkpixbuf.Pixbuf) *CompletionWords {
	var _arg1 *C.gchar                    // out
	var _arg2 *C.GdkPixbuf                // out
	var _cret *C.GtkSourceCompletionWords // in

	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if icon != nil {
		_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(externglib.InternObject(icon).Native()))
	}

	_cret = C.gtk_source_completion_words_new(_arg1, _arg2)
	runtime.KeepAlive(name)
	runtime.KeepAlive(icon)

	var _completionWords *CompletionWords // out

	_completionWords = wrapCompletionWords(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _completionWords
}

// Register registers buffer in the words provider.
//
// The function takes the following parameters:
//
//    - buffer: TextBuffer.
//
func (words *CompletionWords) Register(buffer *gtk.TextBuffer) {
	var _arg0 *C.GtkSourceCompletionWords // out
	var _arg1 *C.GtkTextBuffer            // out

	_arg0 = (*C.GtkSourceCompletionWords)(unsafe.Pointer(externglib.InternObject(words).Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(externglib.InternObject(buffer).Native()))

	C.gtk_source_completion_words_register(_arg0, _arg1)
	runtime.KeepAlive(words)
	runtime.KeepAlive(buffer)
}

// Unregister unregisters buffer from the words provider.
//
// The function takes the following parameters:
//
//    - buffer: TextBuffer.
//
func (words *CompletionWords) Unregister(buffer *gtk.TextBuffer) {
	var _arg0 *C.GtkSourceCompletionWords // out
	var _arg1 *C.GtkTextBuffer            // out

	_arg0 = (*C.GtkSourceCompletionWords)(unsafe.Pointer(externglib.InternObject(words).Native()))
	_arg1 = (*C.GtkTextBuffer)(unsafe.Pointer(externglib.InternObject(buffer).Native()))

	C.gtk_source_completion_words_unregister(_arg0, _arg1)
	runtime.KeepAlive(words)
	runtime.KeepAlive(buffer)
}
