// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// GType values.
var (
	GTypeFileSaverError = coreglib.Type(C.gtk_source_file_saver_error_get_type())
	GTypeFileSaverFlags = coreglib.Type(C.gtk_source_file_saver_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileSaverError, F: marshalFileSaverError},
		coreglib.TypeMarshaler{T: GTypeFileSaverFlags, F: marshalFileSaverFlags},
	})
}

// FileSaverError: error code used with the GTK_SOURCE_FILE_SAVER_ERROR domain.
type FileSaverError C.gint

const (
	// SourceFileSaverErrorInvalidChars: buffer contains invalid characters.
	SourceFileSaverErrorInvalidChars FileSaverError = iota
	// SourceFileSaverErrorExternallyModified: file is externally modified.
	SourceFileSaverErrorExternallyModified
)

func marshalFileSaverError(p uintptr) (interface{}, error) {
	return FileSaverError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileSaverError.
func (f FileSaverError) String() string {
	switch f {
	case SourceFileSaverErrorInvalidChars:
		return "InvalidChars"
	case SourceFileSaverErrorExternallyModified:
		return "ExternallyModified"
	default:
		return fmt.Sprintf("FileSaverError(%d)", f)
	}
}

// FileSaverFlags flags to define the behavior of a SourceFileSaver.
type FileSaverFlags C.guint

const (
	// SourceFileSaverFlagsNone: no flags.
	SourceFileSaverFlagsNone FileSaverFlags = 0b0
	// SourceFileSaverFlagsIgnoreInvalidChars: ignore invalid characters.
	SourceFileSaverFlagsIgnoreInvalidChars FileSaverFlags = 0b1
	// SourceFileSaverFlagsIgnoreModificationTime: save file despite external
	// modifications.
	SourceFileSaverFlagsIgnoreModificationTime FileSaverFlags = 0b10
	// SourceFileSaverFlagsCreateBackup: create a backup before saving the file.
	SourceFileSaverFlagsCreateBackup FileSaverFlags = 0b100
)

func marshalFileSaverFlags(p uintptr) (interface{}, error) {
	return FileSaverFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for FileSaverFlags.
func (f FileSaverFlags) String() string {
	if f == 0 {
		return "FileSaverFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(139)

	for f != 0 {
		next := f & (f - 1)
		bit := f - next

		switch bit {
		case SourceFileSaverFlagsNone:
			builder.WriteString("None|")
		case SourceFileSaverFlagsIgnoreInvalidChars:
			builder.WriteString("IgnoreInvalidChars|")
		case SourceFileSaverFlagsIgnoreModificationTime:
			builder.WriteString("IgnoreModificationTime|")
		case SourceFileSaverFlagsCreateBackup:
			builder.WriteString("CreateBackup|")
		default:
			builder.WriteString(fmt.Sprintf("FileSaverFlags(0b%b)|", bit))
		}

		f = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if f contains other.
func (f FileSaverFlags) Has(other FileSaverFlags) bool {
	return (f & other) == other
}
