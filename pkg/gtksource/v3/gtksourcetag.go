// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_tag_get_type()), F: marshalTagger},
	})
}

type Tag struct {
	_ [0]func() // equal guard
	gtk.TextTag
}

var (
	_ externglib.Objector = (*Tag)(nil)
)

func wrapTag(obj *externglib.Object) *Tag {
	return &Tag{
		TextTag: gtk.TextTag{
			Object: obj,
		},
	}
}

func marshalTagger(p uintptr) (interface{}, error) {
	return wrapTag(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewTag creates a SourceTag. Configure the tag using object arguments, i.e.
// using g_object_set().
//
// For usual cases, gtk_source_buffer_create_source_tag() is more convenient to
// use.
//
// The function takes the following parameters:
//
//    - name (optional): tag name, or NULL.
//
// The function returns the following values:
//
//    - tag: new SourceTag.
//
func NewTag(name string) *Tag {
	var _arg1 *C.gchar      // out
	var _cret *C.GtkTextTag // in

	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.gtk_source_tag_new(_arg1)
	runtime.KeepAlive(name)

	var _tag *Tag // out

	_tag = wrapTag(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _tag
}
