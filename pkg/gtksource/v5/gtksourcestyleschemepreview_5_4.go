// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern void _gotk4_gtksource5_StyleSchemePreview_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeStyleSchemePreview = coreglib.Type(C.gtk_source_style_scheme_preview_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStyleSchemePreview, F: marshalStyleSchemePreview},
	})
}

// StyleSchemePreviewOverrides contains methods that are overridable.
type StyleSchemePreviewOverrides struct {
}

func defaultStyleSchemePreviewOverrides(v *StyleSchemePreview) StyleSchemePreviewOverrides {
	return StyleSchemePreviewOverrides{}
}

// StyleSchemePreview: preview widget for stylescheme.
//
// This widget provides a convenient gtk.Widget to preview a stylescheme.
//
// The styleschemepreview:selected property can be used to manage the selection
// state of a single preview widget.
type StyleSchemePreview struct {
	_ [0]func() // equal guard
	gtk.Widget

	*coreglib.Object
	gtk.Actionable
}

var (
	_ gtk.Widgetter     = (*StyleSchemePreview)(nil)
	_ coreglib.Objector = (*StyleSchemePreview)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StyleSchemePreview, *StyleSchemePreviewClass, StyleSchemePreviewOverrides](
		GTypeStyleSchemePreview,
		initStyleSchemePreviewClass,
		wrapStyleSchemePreview,
		defaultStyleSchemePreviewOverrides,
	)
}

func initStyleSchemePreviewClass(gclass unsafe.Pointer, overrides StyleSchemePreviewOverrides, classInitFunc func(*StyleSchemePreviewClass)) {
	if classInitFunc != nil {
		class := (*StyleSchemePreviewClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStyleSchemePreview(obj *coreglib.Object) *StyleSchemePreview {
	return &StyleSchemePreview{
		Widget: gtk.Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Actionable: gtk.Actionable{
			Widget: gtk.Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: gtk.Accessible{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
				ConstraintTarget: gtk.ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalStyleSchemePreview(p uintptr) (interface{}, error) {
	return wrapStyleSchemePreview(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *StyleSchemePreview) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "activate", false, unsafe.Pointer(C._gotk4_gtksource5_StyleSchemePreview_ConnectActivate), f)
}

// NewStyleSchemePreview creates a new SourceStyleSchemePreview to preview the
// style scheme provided in scheme.
//
// The function takes the following parameters:
//
//   - scheme: SourceStyleScheme.
//
// The function returns the following values:
//
//   - styleSchemePreview: Widget.
//
func NewStyleSchemePreview(scheme *StyleScheme) *StyleSchemePreview {
	var _arg1 *C.GtkSourceStyleScheme // out
	var _cret *C.GtkWidget            // in

	_arg1 = (*C.GtkSourceStyleScheme)(unsafe.Pointer(coreglib.InternObject(scheme).Native()))

	_cret = C.gtk_source_style_scheme_preview_new(_arg1)
	runtime.KeepAlive(scheme)

	var _styleSchemePreview *StyleSchemePreview // out

	_styleSchemePreview = wrapStyleSchemePreview(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _styleSchemePreview
}

// Scheme gets the SourceStyleScheme previewed by the widget.
//
// The function returns the following values:
//
//   - styleScheme: SourceStyleScheme.
//
func (self *StyleSchemePreview) Scheme() *StyleScheme {
	var _arg0 *C.GtkSourceStyleSchemePreview // out
	var _cret *C.GtkSourceStyleScheme        // in

	_arg0 = (*C.GtkSourceStyleSchemePreview)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gtk_source_style_scheme_preview_get_scheme(_arg0)
	runtime.KeepAlive(self)

	var _styleScheme *StyleScheme // out

	_styleScheme = wrapStyleScheme(coreglib.Take(unsafe.Pointer(_cret)))

	return _styleScheme
}

// The function returns the following values:
//
func (self *StyleSchemePreview) Selected() bool {
	var _arg0 *C.GtkSourceStyleSchemePreview // out
	var _cret C.gboolean                     // in

	_arg0 = (*C.GtkSourceStyleSchemePreview)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gtk_source_style_scheme_preview_get_selected(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (self *StyleSchemePreview) SetSelected(selected bool) {
	var _arg0 *C.GtkSourceStyleSchemePreview // out
	var _arg1 C.gboolean                     // out

	_arg0 = (*C.GtkSourceStyleSchemePreview)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if selected {
		_arg1 = C.TRUE
	}

	C.gtk_source_style_scheme_preview_set_selected(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selected)
}
