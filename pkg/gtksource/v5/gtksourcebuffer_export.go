// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

//export _gotk4_gtksource5_Buffer_ConnectBracketMatched
func _gotk4_gtksource5_Buffer_ConnectBracketMatched(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 C.GtkSourceBracketMatchType, arg3 C.guintptr) {
	var f func(iter *gtk.TextIter, state BracketMatchType)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(iter *gtk.TextIter, state BracketMatchType))
	}

	var _iter *gtk.TextIter     // out
	var _state BracketMatchType // out

	if arg1 != nil {
		_iter = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	}
	_state = BracketMatchType(arg2)

	f(_iter, _state)
}

//export _gotk4_gtksource5_Buffer_ConnectCursorMoved
func _gotk4_gtksource5_Buffer_ConnectCursorMoved(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gtksource5_Buffer_ConnectHighlightUpdated
func _gotk4_gtksource5_Buffer_ConnectHighlightUpdated(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 *C.GtkTextIter, arg3 C.guintptr) {
	var f func(start, end *gtk.TextIter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(start, end *gtk.TextIter))
	}

	var _start *gtk.TextIter // out
	var _end *gtk.TextIter   // out

	_start = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_start, _end)
}

//export _gotk4_gtksource5_Buffer_ConnectSourceMarkUpdated
func _gotk4_gtksource5_Buffer_ConnectSourceMarkUpdated(arg0 C.gpointer, arg1 *C.GtkTextMark, arg2 C.guintptr) {
	var f func(mark *gtk.TextMark)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(mark *gtk.TextMark))
	}

	var _mark *gtk.TextMark // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_mark = &gtk.TextMark{
			Object: obj,
		}
	}

	f(_mark)
}
