// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// glib.Type values for gtksourcecompletionproposal.go.
var GTypeCompletionProposal = externglib.Type(C.gtk_source_completion_proposal_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeCompletionProposal, F: marshalCompletionProposal},
	})
}

// CompletionProposalOverrider contains methods that are overridable.
type CompletionProposalOverrider interface {
}

//
// CompletionProposal wraps an interface. This means the user can get the
// underlying type by calling Cast().
type CompletionProposal struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*CompletionProposal)(nil)
)

// CompletionProposaller describes CompletionProposal's interface methods.
type CompletionProposaller interface {
	externglib.Objector

	baseCompletionProposal() *CompletionProposal
}

var _ CompletionProposaller = (*CompletionProposal)(nil)

func ifaceInitCompletionProposaller(gifacePtr, data C.gpointer) {
}

func wrapCompletionProposal(obj *externglib.Object) *CompletionProposal {
	return &CompletionProposal{
		Object: obj,
	}
}

func marshalCompletionProposal(p uintptr) (interface{}, error) {
	return wrapCompletionProposal(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *CompletionProposal) baseCompletionProposal() *CompletionProposal {
	return v
}

// BaseCompletionProposal returns the underlying base object.
func BaseCompletionProposal(obj CompletionProposaller) *CompletionProposal {
	return obj.baseCompletionProposal()
}
