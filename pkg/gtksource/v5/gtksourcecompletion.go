// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_completion_get_type()), F: marshalCompletioner},
	})
}

type Completion struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Completion)(nil)
)

func wrapCompletion(obj *externglib.Object) *Completion {
	return &Completion{
		Object: obj,
	}
}

func marshalCompletioner(p uintptr) (interface{}, error) {
	return wrapCompletion(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectHide: "hide" signal is emitted when the completion window should be
// hidden.
func (self *Completion) ConnectHide(f func()) externglib.SignalHandle {
	return self.Connect("hide", f)
}

// ConnectProviderAdded: "provided-added" signal is emitted when a new provider
// is added to the completion.
func (self *Completion) ConnectProviderAdded(f func(provider CompletionProviderer)) externglib.SignalHandle {
	return self.Connect("provider-added", f)
}

// ConnectProviderRemoved: "provided-removed" signal is emitted when a provider
// has been removed from the completion.
func (self *Completion) ConnectProviderRemoved(f func(provider CompletionProviderer)) externglib.SignalHandle {
	return self.Connect("provider-removed", f)
}

// ConnectShow: "show" signal is emitted when the completion window should be
// shown.
func (self *Completion) ConnectShow(f func()) externglib.SignalHandle {
	return self.Connect("show", f)
}

// AddProvider adds an SourceCompletionProvider to the list of providers to be
// queried for completion results.
//
// The function takes the following parameters:
//
//    - provider: SourceCompletionProvider.
//
func (self *Completion) AddProvider(provider CompletionProviderer) {
	var _arg0 *C.GtkSourceCompletion         // out
	var _arg1 *C.GtkSourceCompletionProvider // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSourceCompletionProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_source_completion_add_provider(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(provider)
}

func (self *Completion) BlockInteractive() {
	var _arg0 *C.GtkSourceCompletion // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	C.gtk_source_completion_block_interactive(_arg0)
	runtime.KeepAlive(self)
}

// Buffer gets the connected SourceView's SourceBuffer.
//
// The function returns the following values:
//
//    - buffer: SourceBuffer.
//
func (self *Completion) Buffer() *Buffer {
	var _arg0 *C.GtkSourceCompletion // out
	var _cret *C.GtkSourceBuffer     // in

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_completion_get_buffer(_arg0)
	runtime.KeepAlive(self)

	var _buffer *Buffer // out

	_buffer = wrapBuffer(externglib.Take(unsafe.Pointer(_cret)))

	return _buffer
}

// The function returns the following values:
//
func (self *Completion) PageSize() uint {
	var _arg0 *C.GtkSourceCompletion // out
	var _cret C.guint                // in

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_completion_get_page_size(_arg0)
	runtime.KeepAlive(self)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// View gets the SourceView that owns the SourceCompletion.
//
// The function returns the following values:
//
//    - view: SourceView.
//
func (self *Completion) View() *View {
	var _arg0 *C.GtkSourceCompletion // out
	var _cret *C.GtkSourceView       // in

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_completion_get_view(_arg0)
	runtime.KeepAlive(self)

	var _view *View // out

	_view = wrapView(externglib.Take(unsafe.Pointer(_cret)))

	return _view
}

// Hide emits the "hide" signal.
//
// When the "hide" signal is emitted, the completion window will be dismissed.
func (self *Completion) Hide() {
	var _arg0 *C.GtkSourceCompletion // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	C.gtk_source_completion_hide(_arg0)
	runtime.KeepAlive(self)
}

// RemoveProvider removes an SourceCompletionProvider previously added with
// gtk_source_completion_add_provider().
//
// The function takes the following parameters:
//
//    - provider: SourceCompletionProvider.
//
func (self *Completion) RemoveProvider(provider CompletionProviderer) {
	var _arg0 *C.GtkSourceCompletion         // out
	var _arg1 *C.GtkSourceCompletionProvider // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSourceCompletionProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_source_completion_remove_provider(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(provider)
}

// The function takes the following parameters:
//
func (self *Completion) SetPageSize(pageSize uint) {
	var _arg0 *C.GtkSourceCompletion // out
	var _arg1 C.guint                // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(pageSize)

	C.gtk_source_completion_set_page_size(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(pageSize)
}

// Show emits the "show" signal.
//
// When the "show" signal is emitted, the completion window will be displayed if
// there are any results available.
func (self *Completion) Show() {
	var _arg0 *C.GtkSourceCompletion // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	C.gtk_source_completion_show(_arg0)
	runtime.KeepAlive(self)
}

func (self *Completion) UnblockInteractive() {
	var _arg0 *C.GtkSourceCompletion // out

	_arg0 = (*C.GtkSourceCompletion)(unsafe.Pointer(self.Native()))

	C.gtk_source_completion_unblock_interactive(_arg0)
	runtime.KeepAlive(self)
}

// CompletionFuZZYHighlight: this will add &lt;b&gt; tags around matched
// characters in haystack based on casefold_query.
//
// The function takes the following parameters:
//
//    - haystack: string to be highlighted.
//    - casefoldQuery: typed-text used to highlight haystack.
//
// The function returns the following values:
//
//    - attrList (optional) or NULL.
//
func CompletionFuZZYHighlight(haystack, casefoldQuery string) *pango.AttrList {
	var _arg1 *C.char          // out
	var _arg2 *C.char          // out
	var _cret *C.PangoAttrList // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(haystack)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(casefoldQuery)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_source_completion_fuzzy_highlight(_arg1, _arg2)
	runtime.KeepAlive(haystack)
	runtime.KeepAlive(casefoldQuery)

	var _attrList *pango.AttrList // out

	if _cret != nil {
		_attrList = (*pango.AttrList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_attrList)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
			},
		)
	}

	return _attrList
}

// CompletionFuZZYMatch: this helper function can do a fuzzy match for you
// giving a haystack and casefolded needle. Casefold your needle using
// g_utf8_casefold() before running the query.
//
// Score will be set with the score of the match upon success. Otherwise, it
// will be set to zero.
//
// The function takes the following parameters:
//
//    - haystack (optional): string to be searched.
//    - casefoldNeedle: g_utf8_casefold() version of the needle.
//
// The function returns the following values:
//
//    - priority (optional): optional location for the score of the match.
//    - ok: TRUE if haystack matched casefold_needle, otherwise FALSE.
//
func CompletionFuZZYMatch(haystack, casefoldNeedle string) (uint, bool) {
	var _arg1 *C.char    // out
	var _arg2 *C.char    // out
	var _arg3 C.guint    // in
	var _cret C.gboolean // in

	if haystack != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(haystack)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(casefoldNeedle)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_source_completion_fuzzy_match(_arg1, _arg2, &_arg3)
	runtime.KeepAlive(haystack)
	runtime.KeepAlive(casefoldNeedle)

	var _priority uint // out
	var _ok bool       // out

	_priority = uint(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _priority, _ok
}
