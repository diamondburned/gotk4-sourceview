// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_snippet_manager_get_type()), F: marshalSnippetManagerer},
	})
}

type SnippetManager struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*SnippetManager)(nil)
)

func wrapSnippetManager(obj *externglib.Object) *SnippetManager {
	return &SnippetManager{
		Object: obj,
	}
}

func marshalSnippetManagerer(p uintptr) (interface{}, error) {
	return wrapSnippetManager(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SearchPath gets the list directories where self looks for snippet files.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array containing a list of snippet files
//      directories. The array is owned by lm and must not be modified.
//
func (self *SnippetManager) SearchPath() []string {
	var _arg0 *C.GtkSourceSnippetManager // out
	var _cret **C.gchar                  // in

	_arg0 = (*C.GtkSourceSnippetManager)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_snippet_manager_get_search_path(_arg0)
	runtime.KeepAlive(self)

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// Snippet queries the known snippets for the first matching group, language_id,
// and/or trigger. If group or language_id are NULL, they will be ignored.
//
// The function takes the following parameters:
//
//    - group (optional) name or NULL.
//    - languageId (optional) or NULL.
//    - trigger for the snippet.
//
// The function returns the following values:
//
//    - snippet (optional) or NULL if no matching snippet was found.
//
func (self *SnippetManager) Snippet(group, languageId, trigger string) *Snippet {
	var _arg0 *C.GtkSourceSnippetManager // out
	var _arg1 *C.gchar                   // out
	var _arg2 *C.gchar                   // out
	var _arg3 *C.gchar                   // out
	var _cret *C.GtkSourceSnippet        // in

	_arg0 = (*C.GtkSourceSnippetManager)(unsafe.Pointer(self.Native()))
	if group != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(group)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if languageId != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(languageId)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(trigger)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_source_snippet_manager_get_snippet(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(self)
	runtime.KeepAlive(group)
	runtime.KeepAlive(languageId)
	runtime.KeepAlive(trigger)

	var _snippet *Snippet // out

	if _cret != nil {
		_snippet = wrapSnippet(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _snippet
}

// ListGroups: list all the known groups within the snippet manager.
//
// The result should be freed with g_free(), and the individual strings are
// owned by self and should never be freed by the caller.
//
// The function returns the following values:
//
//    - utf8s: An array of strings which should be freed with g_free().
//
func (self *SnippetManager) ListGroups() []string {
	var _arg0 *C.GtkSourceSnippetManager // out
	var _cret **C.gchar                  // in

	_arg0 = (*C.GtkSourceSnippetManager)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_snippet_manager_list_groups(_arg0)
	runtime.KeepAlive(self)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// ListMatching queries the known snippets for those matching group,
// language_id, and/or trigger_prefix. If any of these are NULL, they will be
// ignored when filtering the available snippets.
//
// The Model only contains information about the available snippets until
// g_list_model_get_item() is called for a specific snippet. This helps reduce
// the number of #GObject's that are created at runtime to those needed by the
// calling application.
//
// The function takes the following parameters:
//
//    - group (optional) name or NULL.
//    - languageId (optional) or NULL.
//    - triggerPrefix (optional): prefix for a trigger to activate.
//
// The function returns the following values:
//
//    - listModel of SourceSnippet.
//
func (self *SnippetManager) ListMatching(group, languageId, triggerPrefix string) gio.ListModeller {
	var _arg0 *C.GtkSourceSnippetManager // out
	var _arg1 *C.gchar                   // out
	var _arg2 *C.gchar                   // out
	var _arg3 *C.gchar                   // out
	var _cret *C.GListModel              // in

	_arg0 = (*C.GtkSourceSnippetManager)(unsafe.Pointer(self.Native()))
	if group != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(group)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if languageId != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(languageId)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if triggerPrefix != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(triggerPrefix)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	_cret = C.gtk_source_snippet_manager_list_matching(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(self)
	runtime.KeepAlive(group)
	runtime.KeepAlive(languageId)
	runtime.KeepAlive(triggerPrefix)

	var _listModel gio.ListModeller // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.ListModeller is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.ListModeller)
			return ok
		})
		rv, ok := casted.(gio.ListModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.ListModeller")
		}
		_listModel = rv
	}

	return _listModel
}

// SetSearchPath sets the list of directories in which the
// SourceSnippetManagerlooks for snippet files. If dirs is NULL, the search path
// is reset to default.
//
// <note> <para> At the moment this function can be called only before the
// snippet files are loaded for the first time. In practice to set a custom
// search path for a SourceSnippetManager, you have to call this function right
// after creating it. </para> </note>.
//
// The function takes the following parameters:
//
//    - dirs (optional): NULL-terminated array of strings or NULL.
//
func (self *SnippetManager) SetSearchPath(dirs []string) {
	var _arg0 *C.GtkSourceSnippetManager // out
	var _arg1 **C.gchar                  // out

	_arg0 = (*C.GtkSourceSnippetManager)(unsafe.Pointer(self.Native()))
	{
		_arg1 = (**C.gchar)(C.calloc(C.size_t((len(dirs) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg1))
		{
			out := unsafe.Slice(_arg1, len(dirs)+1)
			var zero *C.gchar
			out[len(dirs)] = zero
			for i := range dirs {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(dirs[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	C.gtk_source_snippet_manager_set_search_path(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(dirs)
}

// SnippetManagerGetDefault returns the default SourceSnippetManager instance.
//
// The function returns the following values:
//
//    - snippetManager which is owned by GtkSourceView library and must not be
//      unref'd.
//
func SnippetManagerGetDefault() *SnippetManager {
	var _cret *C.GtkSourceSnippetManager // in

	_cret = C.gtk_source_snippet_manager_get_default()

	var _snippetManager *SnippetManager // out

	_snippetManager = wrapSnippetManager(externglib.Take(unsafe.Pointer(_cret)))

	return _snippetManager
}
