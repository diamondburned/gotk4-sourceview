// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern gchar* _gotk4_gtksource5_MarkAttributes_ConnectQueryTooltipText(gpointer, GtkSourceMark*, guintptr);
// extern gchar* _gotk4_gtksource5_MarkAttributes_ConnectQueryTooltipMarkup(gpointer, GtkSourceMark*, guintptr);
import "C"

// GType values.
var (
	GTypeMarkAttributes = coreglib.Type(C.gtk_source_mark_attributes_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMarkAttributes, F: marshalMarkAttributes},
	})
}

// MarkAttributesOverrides contains methods that are overridable.
type MarkAttributesOverrides struct {
}

func defaultMarkAttributesOverrides(v *MarkAttributes) MarkAttributesOverrides {
	return MarkAttributesOverrides{}
}

// MarkAttributes: source mark attributes object.
//
// GtkSourceMarkAttributes is an object specifying attributes used by a view to
// visually show lines marked with marks of a specific category. It allows you
// to define a background color of a line, an icon shown in gutter and tooltips.
//
// The background color is used as a background of a line where a mark is
// placed and it can be set with markattributes.SetBackground. To check
// if any custom background color was defined and what color it is, use
// markattributes.GetBackground.
//
// An icon is a graphic element which is shown in the gutter of a view.
// An example use is showing a red filled circle in a debugger to show
// that a breakpoint was set in certain line. To get an icon that will
// be placed in a gutter, first a base for it must be specified and then
// markattributes.RenderIcon must be called. There are several ways to specify a
// base for an icon:
//
// - markattributes.SetIconName
//
// - markattributes.SetGIcon
//
// - markattributes.SetPixbuf
//
// Using any of the above functions overrides the one used earlier. But note
// that a getter counterpart of earlier used function can still return some
// value, but it is just not used when rendering the proper icon.
//
// To provide meaningful tooltips for a given mark of a category,
// you should connect to markattributes::query-tooltip-text or
// markattributes::query-tooltip-markup where the latter takes precedence.
type MarkAttributes struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*MarkAttributes)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*MarkAttributes, *MarkAttributesClass, MarkAttributesOverrides](
		GTypeMarkAttributes,
		initMarkAttributesClass,
		wrapMarkAttributes,
		defaultMarkAttributesOverrides,
	)
}

func initMarkAttributesClass(gclass unsafe.Pointer, overrides MarkAttributesOverrides, classInitFunc func(*MarkAttributesClass)) {
	if classInitFunc != nil {
		class := (*MarkAttributesClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMarkAttributes(obj *coreglib.Object) *MarkAttributes {
	return &MarkAttributes{
		Object: obj,
	}
}

func marshalMarkAttributes(p uintptr) (interface{}, error) {
	return wrapMarkAttributes(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectQueryTooltipMarkup: code should connect to this signal to provide a
// tooltip for given mark. The tooltip can contain a markup.
func (attributes *MarkAttributes) ConnectQueryTooltipMarkup(f func(mark *Mark) (utf8 string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(attributes, "query-tooltip-markup", false, unsafe.Pointer(C._gotk4_gtksource5_MarkAttributes_ConnectQueryTooltipMarkup), f)
}

// ConnectQueryTooltipText: code should connect to this signal to provide a
// tooltip for given mark. The tooltip should be just a plain text.
func (attributes *MarkAttributes) ConnectQueryTooltipText(f func(mark *Mark) (utf8 string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(attributes, "query-tooltip-text", false, unsafe.Pointer(C._gotk4_gtksource5_MarkAttributes_ConnectQueryTooltipText), f)
}

// NewMarkAttributes creates a new source mark attributes.
//
// The function returns the following values:
//
//   - markAttributes: new source mark attributes.
//
func NewMarkAttributes() *MarkAttributes {
	var _cret *C.GtkSourceMarkAttributes // in

	_cret = C.gtk_source_mark_attributes_new()

	var _markAttributes *MarkAttributes // out

	_markAttributes = wrapMarkAttributes(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _markAttributes
}

// Background stores background color in background.
//
// The function returns the following values:
//
//   - background: RGBA.
//   - ok: whether background color for attributes was set.
//
func (attributes *MarkAttributes) Background() (*gdk.RGBA, bool) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 C.GdkRGBA                  // in
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))

	_cret = C.gtk_source_mark_attributes_get_background(_arg0, &_arg1)
	runtime.KeepAlive(attributes)

	var _background *gdk.RGBA // out
	var _ok bool              // out

	_background = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _background, _ok
}

// GIcon gets a gio.Icon to be used as a base for rendered icon.
//
// Note that the icon can be NULL if it wasn't set earlier.
//
// The function returns the following values:
//
//   - icon: icon. The icon belongs to attributes and should not be unreffed.
//
func (attributes *MarkAttributes) GIcon() *gio.Icon {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _cret *C.GIcon                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))

	_cret = C.gtk_source_mark_attributes_get_gicon(_arg0)
	runtime.KeepAlive(attributes)

	var _icon *gio.Icon // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_icon = &gio.Icon{
			Object: obj,
		}
	}

	return _icon
}

// IconName gets a name of an icon to be used as a base for rendered icon.
//
// Note that the icon name can be NULL if it wasn't set earlier.
//
// The function returns the following values:
//
//   - utf8: icon name. The string belongs to attributes and should not be
//     freed.
//
func (attributes *MarkAttributes) IconName() string {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))

	_cret = C.gtk_source_mark_attributes_get_icon_name(_arg0)
	runtime.KeepAlive(attributes)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Pixbuf gets a gdkpixbuf.Pixbuf to be used as a base for rendered icon.
//
// Note that the pixbuf can be NULL if it wasn't set earlier.
//
// The function returns the following values:
//
//   - pixbuf: pixbuf. The pixbuf belongs to attributes and should not be
//     unreffed.
//
func (attributes *MarkAttributes) Pixbuf() *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _cret *C.GdkPixbuf               // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))

	_cret = C.gtk_source_mark_attributes_get_pixbuf(_arg0)
	runtime.KeepAlive(attributes)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_pixbuf = &gdkpixbuf.Pixbuf{
			Object: obj,
			LoadableIcon: gio.LoadableIcon{
				Icon: gio.Icon{
					Object: obj,
				},
			},
		}
	}

	return _pixbuf
}

// TooltipMarkup queries for a tooltip by emitting a
// markattributes::query-tooltip-markup signal.
//
// The tooltip may contain a markup.
//
// The function takes the following parameters:
//
//   - mark: SourceMark.
//
// The function returns the following values:
//
//   - utf8: tooltip. The returned string should be freed by using g_free() when
//     done with it.
//
func (attributes *MarkAttributes) TooltipMarkup(mark *Mark) string {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GtkSourceMark           // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.GtkSourceMark)(unsafe.Pointer(coreglib.InternObject(mark).Native()))

	_cret = C.gtk_source_mark_attributes_get_tooltip_markup(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(mark)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// TooltipText queries for a tooltip by emitting a
// markattributes::query-tooltip-text signal.
//
// The tooltip is a plain text.
//
// The function takes the following parameters:
//
//   - mark: SourceMark.
//
// The function returns the following values:
//
//   - utf8: tooltip. The returned string should be freed by using g_free() when
//     done with it.
//
func (attributes *MarkAttributes) TooltipText(mark *Mark) string {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GtkSourceMark           // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.GtkSourceMark)(unsafe.Pointer(coreglib.InternObject(mark).Native()))

	_cret = C.gtk_source_mark_attributes_get_tooltip_text(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(mark)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RenderIcon renders an icon of given size.
//
// The base of the icon is set by the last call to one of:
//
// - markattributes.SetPixbuf
//
// - markattributes.SetGIcon
//
// - markattributes.SetIconName
//
// size cannot be lower than 1.
//
// The function takes the following parameters:
//
//   - widget of which style settings may be used.
//   - size of the rendered icon.
//
// The function returns the following values:
//
//   - paintable The paintable belongs to attributes and should not be unreffed.
//
func (attributes *MarkAttributes) RenderIcon(widget gtk.Widgetter, size int) *gdk.Paintable {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GtkWidget               // out
	var _arg2 C.gint                     // out
	var _cret *C.GdkPaintable            // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = C.gint(size)

	_cret = C.gtk_source_mark_attributes_render_icon(_arg0, _arg1, _arg2)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(size)

	var _paintable *gdk.Paintable // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_paintable = &gdk.Paintable{
			Object: obj,
		}
	}

	return _paintable
}

// SetBackground sets background color to the one given in background.
//
// The function takes the following parameters:
//
//   - background: RGBA.
//
func (attributes *MarkAttributes) SetBackground(background *gdk.RGBA) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GdkRGBA                 // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(background)))

	C.gtk_source_mark_attributes_set_background(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(background)
}

// SetGIcon sets an icon to be used as a base for rendered icon.
//
// The function takes the following parameters:
//
//   - gicon to be used.
//
func (attributes *MarkAttributes) SetGIcon(gicon gio.Iconner) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GIcon                   // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(gicon).Native()))

	C.gtk_source_mark_attributes_set_gicon(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(gicon)
}

// SetIconName sets a name of an icon to be used as a base for rendered icon.
//
// The function takes the following parameters:
//
//   - iconName: name of an icon to be used.
//
func (attributes *MarkAttributes) SetIconName(iconName string) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.gchar                   // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_mark_attributes_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(iconName)
}

// SetPixbuf sets a pixbuf to be used as a base for rendered icon.
//
// The function takes the following parameters:
//
//   - pixbuf to be used.
//
func (attributes *MarkAttributes) SetPixbuf(pixbuf *gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GdkPixbuf               // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(coreglib.InternObject(attributes).Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))

	C.gtk_source_mark_attributes_set_pixbuf(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(pixbuf)
}

// MarkAttributesClass: instance of this type is always passed by reference.
type MarkAttributesClass struct {
	*markAttributesClass
}

// markAttributesClass is the struct that's finalized.
type markAttributesClass struct {
	native *C.GtkSourceMarkAttributesClass
}
