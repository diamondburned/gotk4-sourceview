// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_mark_attributes_get_type()), F: marshalMarkAttributesser},
	})
}

type MarkAttributes struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*MarkAttributes)(nil)
)

func wrapMarkAttributes(obj *externglib.Object) *MarkAttributes {
	return &MarkAttributes{
		Object: obj,
	}
}

func marshalMarkAttributesser(p uintptr) (interface{}, error) {
	return wrapMarkAttributes(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectQueryTooltipMarkup: code should connect to this signal to provide a
// tooltip for given mark. The tooltip can contain a markup.
func (attributes *MarkAttributes) ConnectQueryTooltipMarkup(f func(mark Mark) string) externglib.SignalHandle {
	return attributes.Connect("query-tooltip-markup", f)
}

// ConnectQueryTooltipText: code should connect to this signal to provide a
// tooltip for given mark. The tooltip should be just a plain text.
func (attributes *MarkAttributes) ConnectQueryTooltipText(f func(mark Mark) string) externglib.SignalHandle {
	return attributes.Connect("query-tooltip-text", f)
}

// NewMarkAttributes creates a new source mark attributes.
//
// The function returns the following values:
//
//    - markAttributes: new source mark attributes.
//
func NewMarkAttributes() *MarkAttributes {
	var _cret *C.GtkSourceMarkAttributes // in

	_cret = C.gtk_source_mark_attributes_new()

	var _markAttributes *MarkAttributes // out

	_markAttributes = wrapMarkAttributes(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _markAttributes
}

// Background stores background color in background.
//
// The function returns the following values:
//
//    - background: RGBA.
//    - ok: whether background color for attributes was set.
//
func (attributes *MarkAttributes) Background() (*gdk.RGBA, bool) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 C.GdkRGBA                  // in
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))

	_cret = C.gtk_source_mark_attributes_get_background(_arg0, &_arg1)
	runtime.KeepAlive(attributes)

	var _background *gdk.RGBA // out
	var _ok bool              // out

	_background = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _background, _ok
}

// GIcon gets a #GIcon to be used as a base for rendered icon. Note that the
// icon can be NULL if it wasn't set earlier.
//
// The function returns the following values:
//
//    - icon: icon. The icon belongs to attributes and should not be unreffed.
//
func (attributes *MarkAttributes) GIcon() gio.Iconner {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _cret *C.GIcon                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))

	_cret = C.gtk_source_mark_attributes_get_gicon(_arg0)
	runtime.KeepAlive(attributes)

	var _icon gio.Iconner // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Iconner is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.Iconner)
			return ok
		})
		rv, ok := casted.(gio.Iconner)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Iconner")
		}
		_icon = rv
	}

	return _icon
}

// IconName gets a name of an icon to be used as a base for rendered icon. Note
// that the icon name can be NULL if it wasn't set earlier.
//
// The function returns the following values:
//
//    - utf8: icon name. The string belongs to attributes and should not be
//      freed.
//
func (attributes *MarkAttributes) IconName() string {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))

	_cret = C.gtk_source_mark_attributes_get_icon_name(_arg0)
	runtime.KeepAlive(attributes)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Pixbuf gets a Pixbuf to be used as a base for rendered icon. Note that the
// pixbuf can be NULL if it wasn't set earlier.
//
// The function returns the following values:
//
//    - pixbuf: pixbuf. The pixbuf belongs to attributes and should not be
//      unreffed.
//
func (attributes *MarkAttributes) Pixbuf() *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _cret *C.GdkPixbuf               // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))

	_cret = C.gtk_source_mark_attributes_get_pixbuf(_arg0)
	runtime.KeepAlive(attributes)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_pixbuf = &gdkpixbuf.Pixbuf{
			Object: obj,
			LoadableIcon: gio.LoadableIcon{
				Icon: gio.Icon{
					Object: obj,
				},
			},
		}
	}

	return _pixbuf
}

// TooltipMarkup queries for a tooltip by emitting a
// SourceMarkAttributes::query-tooltip-markup signal. The tooltip may contain a
// markup.
//
// The function takes the following parameters:
//
//    - mark: SourceMark.
//
// The function returns the following values:
//
//    - utf8: tooltip. The returned string should be freed by using g_free() when
//      done with it.
//
func (attributes *MarkAttributes) TooltipMarkup(mark *Mark) string {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GtkSourceMark           // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.GtkSourceMark)(unsafe.Pointer(mark.Native()))

	_cret = C.gtk_source_mark_attributes_get_tooltip_markup(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(mark)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// TooltipText queries for a tooltip by emitting a
// SourceMarkAttributes::query-tooltip-text signal. The tooltip is a plain text.
//
// The function takes the following parameters:
//
//    - mark: SourceMark.
//
// The function returns the following values:
//
//    - utf8: tooltip. The returned string should be freed by using g_free() when
//      done with it.
//
func (attributes *MarkAttributes) TooltipText(mark *Mark) string {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GtkSourceMark           // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.GtkSourceMark)(unsafe.Pointer(mark.Native()))

	_cret = C.gtk_source_mark_attributes_get_tooltip_text(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(mark)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RenderIcon renders an icon of given size. The base of the icon is set by the
// last call to one of: gtk_source_mark_attributes_set_pixbuf(),
// gtk_source_mark_attributes_set_gicon() or
// gtk_source_mark_attributes_set_icon_name(). size cannot be lower than 1.
//
// The function takes the following parameters:
//
//    - widget of which style settings may be used.
//    - size of the rendered icon.
//
// The function returns the following values:
//
//    - paintable The paintable belongs to attributes and should not be unreffed.
//
func (attributes *MarkAttributes) RenderIcon(widget gtk.Widgetter, size int) gdk.Paintabler {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GtkWidget               // out
	var _arg2 C.gint                     // out
	var _cret *C.GdkPaintable            // in

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	_arg2 = C.gint(size)

	_cret = C.gtk_source_mark_attributes_render_icon(_arg0, _arg1, _arg2)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(size)

	var _paintable gdk.Paintabler // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Paintabler is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gdk.Paintabler)
			return ok
		})
		rv, ok := casted.(gdk.Paintabler)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Paintabler")
		}
		_paintable = rv
	}

	return _paintable
}

// SetBackground sets background color to the one given in background.
//
// The function takes the following parameters:
//
//    - background: RGBA.
//
func (attributes *MarkAttributes) SetBackground(background *gdk.RGBA) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GdkRGBA                 // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(background)))

	C.gtk_source_mark_attributes_set_background(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(background)
}

// SetGIcon sets an icon to be used as a base for rendered icon.
//
// The function takes the following parameters:
//
//    - gicon to be used.
//
func (attributes *MarkAttributes) SetGIcon(gicon gio.Iconner) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GIcon                   // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(gicon.Native()))

	C.gtk_source_mark_attributes_set_gicon(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(gicon)
}

// SetIconName sets a name of an icon to be used as a base for rendered icon.
//
// The function takes the following parameters:
//
//    - iconName: name of an icon to be used.
//
func (attributes *MarkAttributes) SetIconName(iconName string) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.gchar                   // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_mark_attributes_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(iconName)
}

// SetPixbuf sets a pixbuf to be used as a base for rendered icon.
//
// The function takes the following parameters:
//
//    - pixbuf to be used.
//
func (attributes *MarkAttributes) SetPixbuf(pixbuf *gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkSourceMarkAttributes // out
	var _arg1 *C.GdkPixbuf               // out

	_arg0 = (*C.GtkSourceMarkAttributes)(unsafe.Pointer(attributes.Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(pixbuf.Native()))

	C.gtk_source_mark_attributes_set_pixbuf(_arg0, _arg1)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(pixbuf)
}
