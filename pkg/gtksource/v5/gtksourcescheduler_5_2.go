// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
// extern void callbackDelete(gpointer);
// extern gboolean _gotk4_gtksource5_SchedulerCallback(gint64, gpointer);
import "C"

// SchedulerCallback: this function is called incrementally to process
// additional background work. A deadline is provided which can be checked using
// glib.GetMonotonicTime() so that additional work can be processed each frame.
//
// This is useful for situations where you are incrementally performing
// background work such as spell checking or semantic syntax highlighting.
type SchedulerCallback func(deadline int64) (ok bool)

// SchedulerAdd: simplified version of scheduler_add_full.
//
// The function takes the following parameters:
//
//   - callback to execute.
//
// The function returns the following values:
//
func SchedulerAdd(callback SchedulerCallback) uint {
	var _arg1 C.GtkSourceSchedulerCallback // out
	var _arg2 C.gpointer
	var _cret C.gsize // in

	_arg1 = (*[0]byte)(C._gotk4_gtksource5_SchedulerCallback)
	_arg2 = C.gpointer(gbox.AssignOnce(callback))

	_cret = C.gtk_source_scheduler_add(_arg1, _arg2)
	runtime.KeepAlive(callback)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}

// SchedulerAddFull adds a new callback that will be executed as time permits on
// the main thread.
//
// This is useful when you need to do a lot of background work but want to do it
// incrementally.
//
// callback will be provided a deadline that it should complete it's work by (or
// near) and can be checked using glib.GetMonotonicTime() for comparison.
//
// Use scheduler_remove to remove the handler.
//
// The function takes the following parameters:
//
//   - callback to execute.
//
// The function returns the following values:
//
func SchedulerAddFull(callback SchedulerCallback) uint {
	var _arg1 C.GtkSourceSchedulerCallback // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify
	var _cret C.gsize // in

	_arg1 = (*[0]byte)(C._gotk4_gtksource5_SchedulerCallback)
	_arg2 = C.gpointer(gbox.Assign(callback))
	_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	_cret = C.gtk_source_scheduler_add_full(_arg1, _arg2, _arg3)
	runtime.KeepAlive(callback)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}

// SchedulerRemove removes a scheduler callback previously registered with
// scheduler_add or scheduler_add_full.
//
// The function takes the following parameters:
//
//   - handlerId: handler id.
//
func SchedulerRemove(handlerId uint) {
	var _arg1 C.gsize // out

	_arg1 = C.gsize(handlerId)

	C.gtk_source_scheduler_remove(_arg1)
	runtime.KeepAlive(handlerId)
}
