// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// glib.Type values for gtksourcesnippet.go.
var GTypeSnippet = externglib.Type(C.gtk_source_snippet_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSnippet, F: marshalSnippet},
	})
}

// SnippetOverrider contains methods that are overridable.
type SnippetOverrider interface {
}

type Snippet struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Snippet)(nil)
)

func classInitSnippetter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSnippet(obj *externglib.Object) *Snippet {
	return &Snippet{
		Object: obj,
	}
}

func marshalSnippet(p uintptr) (interface{}, error) {
	return wrapSnippet(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSnippet creates a new SourceSnippet.
//
// The function takes the following parameters:
//
//    - trigger (optional) word.
//    - languageId (optional): source language.
//
// The function returns the following values:
//
//    - snippet: new SourceSnippet.
//
func NewSnippet(trigger, languageId string) *Snippet {
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cret *C.GtkSourceSnippet // in

	if trigger != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(trigger)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if languageId != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(languageId)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gtk_source_snippet_new(_arg1, _arg2)
	runtime.KeepAlive(trigger)
	runtime.KeepAlive(languageId)

	var _snippet *Snippet // out

	_snippet = wrapSnippet(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _snippet
}

// AddChunk appends chunk to the snippet.
//
// This may only be called before the snippet has been expanded.
//
// The function takes the following parameters:
//
//    - chunk: SourceSnippetChunk.
//
func (snippet *Snippet) AddChunk(chunk *SnippetChunk) {
	var _arg0 *C.GtkSourceSnippet      // out
	var _arg1 *C.GtkSourceSnippetChunk // out

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))
	_arg1 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(externglib.InternObject(chunk).Native()))

	C.gtk_source_snippet_add_chunk(_arg0, _arg1)
	runtime.KeepAlive(snippet)
	runtime.KeepAlive(chunk)
}

// Copy does a deep copy of the snippet.
//
// The function returns the following values:
//
//    - ret: new SourceSnippet.
//
func (snippet *Snippet) Copy() *Snippet {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret *C.GtkSourceSnippet // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_copy(_arg0)
	runtime.KeepAlive(snippet)

	var _ret *Snippet // out

	_ret = wrapSnippet(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _ret
}

// Context gets the context used for expanding the snippet.
//
// The function returns the following values:
//
//    - snippetContext (optional): SourceSnippetContext.
//
func (snippet *Snippet) Context() *SnippetContext {
	var _arg0 *C.GtkSourceSnippet        // out
	var _cret *C.GtkSourceSnippetContext // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_context(_arg0)
	runtime.KeepAlive(snippet)

	var _snippetContext *SnippetContext // out

	if _cret != nil {
		_snippetContext = wrapSnippetContext(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _snippetContext
}

// Description gets the description for the snippet.
//
// The function returns the following values:
//
func (snippet *Snippet) Description() string {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_description(_arg0)
	runtime.KeepAlive(snippet)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// FocusPosition gets the current focus for the snippet. This is changed as the
// user tabs through focus locations.
//
// The function returns the following values:
//
//    - gint focus position, or -1 if unset.
//
func (snippet *Snippet) FocusPosition() int {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_focus_position(_arg0)
	runtime.KeepAlive(snippet)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// LanguageID gets the language-id used for the source snippet.
//
// The language identifier should be one that matches a source language
// SourceLanguage:id property.
//
// The function returns the following values:
//
//    - utf8: language identifier.
//
func (snippet *Snippet) LanguageID() string {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_language_id(_arg0)
	runtime.KeepAlive(snippet)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NChunks gets the number of chunks in the snippet.
//
// Note that not all chunks are editable.
//
// The function returns the following values:
//
//    - guint: number of chunks.
//
func (snippet *Snippet) NChunks() uint {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret C.guint             // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_n_chunks(_arg0)
	runtime.KeepAlive(snippet)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Name gets the name for the snippet.
//
// The function returns the following values:
//
func (snippet *Snippet) Name() string {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_name(_arg0)
	runtime.KeepAlive(snippet)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NthChunk gets the chunk at nth.
//
// The function takes the following parameters:
//
//    - nth chunk to get.
//
// The function returns the following values:
//
//    - snippetChunk: SourceSnippetChunk.
//
func (snippet *Snippet) NthChunk(nth uint) *SnippetChunk {
	var _arg0 *C.GtkSourceSnippet      // out
	var _arg1 C.guint                  // out
	var _cret *C.GtkSourceSnippetChunk // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))
	_arg1 = C.guint(nth)

	_cret = C.gtk_source_snippet_get_nth_chunk(_arg0, _arg1)
	runtime.KeepAlive(snippet)
	runtime.KeepAlive(nth)

	var _snippetChunk *SnippetChunk // out

	_snippetChunk = wrapSnippetChunk(externglib.Take(unsafe.Pointer(_cret)))

	return _snippetChunk
}

// Trigger gets the trigger for the source snippet. A trigger is a word that can
// be expanded into the full snippet when the user presses Tab.
//
// The function returns the following values:
//
//    - utf8 (optional): string or NULL.
//
func (snippet *Snippet) Trigger() string {
	var _arg0 *C.GtkSourceSnippet // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))

	_cret = C.gtk_source_snippet_get_trigger(_arg0)
	runtime.KeepAlive(snippet)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetDescription sets the description for the snippet.
//
// The function takes the following parameters:
//
//    - description: snippet description.
//
func (snippet *Snippet) SetDescription(description string) {
	var _arg0 *C.GtkSourceSnippet // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_set_description(_arg0, _arg1)
	runtime.KeepAlive(snippet)
	runtime.KeepAlive(description)
}

// SetLanguageID sets the language identifier for the snippet.
//
// This should match the SourceLanguage:id identifier.
//
// The function takes the following parameters:
//
//    - languageId: language identifier for the snippet.
//
func (snippet *Snippet) SetLanguageID(languageId string) {
	var _arg0 *C.GtkSourceSnippet // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(languageId)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_set_language_id(_arg0, _arg1)
	runtime.KeepAlive(snippet)
	runtime.KeepAlive(languageId)
}

// SetName sets the name for the snippet.
//
// The function takes the following parameters:
//
//    - name: snippet name.
//
func (snippet *Snippet) SetName(name string) {
	var _arg0 *C.GtkSourceSnippet // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_set_name(_arg0, _arg1)
	runtime.KeepAlive(snippet)
	runtime.KeepAlive(name)
}

// SetTrigger sets the trigger for the snippet.
//
// The function takes the following parameters:
//
//    - trigger word.
//
func (snippet *Snippet) SetTrigger(trigger string) {
	var _arg0 *C.GtkSourceSnippet // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkSourceSnippet)(unsafe.Pointer(externglib.InternObject(snippet).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(trigger)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_set_trigger(_arg0, _arg1)
	runtime.KeepAlive(snippet)
	runtime.KeepAlive(trigger)
}
