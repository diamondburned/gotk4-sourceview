// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

// EncodingGetAll gets all encodings.
//
// The function returns the following values:
//
//   - sList: list of all SourceEncoding's. Free with g_slist_free().
//
func EncodingGetAll() []*Encoding {
	var _cret *C.GSList // in

	_cret = C.gtk_source_encoding_get_all()

	var _sList []*Encoding // out

	_sList = make([]*Encoding, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GtkSourceEncoding)(v)
		var dst *Encoding // out
		dst = (*Encoding)(gextras.NewStructNative(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// EncodingGetCurrent gets the SourceEncoding for the current locale.
//
// See also glib.GetCharset().
//
// The function returns the following values:
//
//   - encoding: current locale encoding.
//
func EncodingGetCurrent() *Encoding {
	var _cret *C.GtkSourceEncoding // in

	_cret = C.gtk_source_encoding_get_current()

	var _encoding *Encoding // out

	_encoding = (*Encoding)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _encoding
}

// EncodingGetDefaultCandidates gets the list of default candidate encodings to
// try when loading a file.
//
// See fileloader.SetCandidateEncodings.
//
// This function returns a different list depending on the current locale (i.e.
// language, country and default encoding). The UTF-8 encoding and the current
// locale encoding are guaranteed to be present in the returned list.
//
// The function returns the following values:
//
//   - sList: list of default candidate encodings. Free with g_slist_free().
//
func EncodingGetDefaultCandidates() []*Encoding {
	var _cret *C.GSList // in

	_cret = C.gtk_source_encoding_get_default_candidates()

	var _sList []*Encoding // out

	_sList = make([]*Encoding, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GtkSourceEncoding)(v)
		var dst *Encoding // out
		dst = (*Encoding)(gextras.NewStructNative(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// EncodingGetFromCharset gets a SourceEncoding from a character set such as
// "UTF-8" or "ISO-8859-1".
//
// The function takes the following parameters:
//
//   - charset: character set.
//
// The function returns the following values:
//
//   - encoding (optional): corresponding SourceEncoding, or NULL if not found.
//
func EncodingGetFromCharset(charset string) *Encoding {
	var _arg1 *C.gchar             // out
	var _cret *C.GtkSourceEncoding // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(charset)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_source_encoding_get_from_charset(_arg1)
	runtime.KeepAlive(charset)

	var _encoding *Encoding // out

	if _cret != nil {
		_encoding = (*Encoding)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _encoding
}

// The function returns the following values:
//
//   - encoding: UTF-8 encoding.
//
func EncodingGetUTF8() *Encoding {
	var _cret *C.GtkSourceEncoding // in

	_cret = C.gtk_source_encoding_get_utf8()

	var _encoding *Encoding // out

	_encoding = (*Encoding)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _encoding
}
