// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_hover_context_get_type()), F: marshalHoverContexter},
	})
}

type HoverContext struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*HoverContext)(nil)
)

func wrapHoverContext(obj *externglib.Object) *HoverContext {
	return &HoverContext{
		Object: obj,
	}
}

func marshalHoverContexter(p uintptr) (interface{}, error) {
	return wrapHoverContext(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//    - begin
//    - end
//
// The function returns the following values:
//
func (self *HoverContext) Bounds(begin, end *gtk.TextIter) bool {
	var _arg0 *C.GtkSourceHoverContext // out
	var _arg1 *C.GtkTextIter           // out
	var _arg2 *C.GtkTextIter           // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkSourceHoverContext)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(begin)))
	_arg2 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(end)))

	_cret = C.gtk_source_hover_context_get_bounds(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(begin)
	runtime.KeepAlive(end)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Buffer: convenience function to get the buffer.
//
// The function returns the following values:
//
//    - buffer for the view.
//
func (self *HoverContext) Buffer() *Buffer {
	var _arg0 *C.GtkSourceHoverContext // out
	var _cret *C.GtkSourceBuffer       // in

	_arg0 = (*C.GtkSourceHoverContext)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_hover_context_get_buffer(_arg0)
	runtime.KeepAlive(self)

	var _buffer *Buffer // out

	_buffer = wrapBuffer(externglib.Take(unsafe.Pointer(_cret)))

	return _buffer
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (self *HoverContext) Iter(iter *gtk.TextIter) bool {
	var _arg0 *C.GtkSourceHoverContext // out
	var _arg1 *C.GtkTextIter           // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkSourceHoverContext)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = C.gtk_source_hover_context_get_iter(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//    - view that owns the context.
//
func (self *HoverContext) View() *View {
	var _arg0 *C.GtkSourceHoverContext // out
	var _cret *C.GtkSourceView         // in

	_arg0 = (*C.GtkSourceHoverContext)(unsafe.Pointer(self.Native()))

	_cret = C.gtk_source_hover_context_get_view(_arg0)
	runtime.KeepAlive(self)

	var _view *View // out

	_view = wrapView(externglib.Take(unsafe.Pointer(_cret)))

	return _view
}
