// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

//export _gotk4_gtksource5_CompletionContext_ConnectProviderModelChanged
func _gotk4_gtksource5_CompletionContext_ConnectProviderModelChanged(arg0 C.gpointer, arg1 *C.GtkSourceCompletionProvider, arg2 *C.GListModel, arg3 C.guintptr) {
	var f func(provider CompletionProviderer, model gio.ListModeller)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(provider CompletionProviderer, model gio.ListModeller))
	}

	var _provider CompletionProviderer // out
	var _model gio.ListModeller        // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtksource.CompletionProviderer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CompletionProviderer)
			return ok
		})
		rv, ok := casted.(CompletionProviderer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtksource.CompletionProviderer")
		}
		_provider = rv
	}
	if arg2 != nil {
		{
			objptr := unsafe.Pointer(arg2)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gio.ListModeller)
				return ok
			})
			rv, ok := casted.(gio.ListModeller)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.ListModeller")
			}
			_model = rv
		}
	}

	f(_provider, _model)
}
