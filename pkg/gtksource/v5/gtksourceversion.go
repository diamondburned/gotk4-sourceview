// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

// MAJOR_VERSION: like gtk_source_get_major_version(), but from the headers used
// at application compile time, rather than from the library linked against at
// application run time.
const MAJOR_VERSION = 5

// MICRO_VERSION: like gtk_source_get_micro_version(), but from the headers used
// at application compile time, rather than from the library linked against at
// application run time.
const MICRO_VERSION = 0

// MINOR_VERSION: like gtk_source_get_minor_version(), but from the headers used
// at application compile time, rather than from the library linked against at
// application run time.
const MINOR_VERSION = 8

// CheckVersion: like GTK_SOURCE_CHECK_VERSION, but the check for
// gtk_source_check_version is at runtime instead of compile time. This is
// useful for compiling against older versions of GtkSourceView, but using
// features from newer versions.
//
// The function takes the following parameters:
//
//   - major version to check.
//   - minor version to check.
//   - micro version to check.
//
// The function returns the following values:
//
//   - ok: TRUE if the version of the GtkSourceView currently loaded is the same
//     as or newer than the passed-in version.
//
func CheckVersion(major, minor, micro uint) bool {
	var _arg1 C.guint    // out
	var _arg2 C.guint    // out
	var _arg3 C.guint    // out
	var _cret C.gboolean // in

	_arg1 = C.guint(major)
	_arg2 = C.guint(minor)
	_arg3 = C.guint(micro)

	_cret = C.gtk_source_check_version(_arg1, _arg2, _arg3)
	runtime.KeepAlive(major)
	runtime.KeepAlive(minor)
	runtime.KeepAlive(micro)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GetMajorVersion returns the major version number of the GtkSourceView
// library. (e.g. in GtkSourceView version 3.20.0 this is 3.)
//
// This function is in the library, so it represents the GtkSourceView library
// your code is running against. Contrast with the K_SOURCE_MAJOR_VERSION macro,
// which represents the major version of the GtkSourceView headers you have
// included when compiling your code.
//
// The function returns the following values:
//
//   - guint: major version number of the GtkSourceView library.
//
func GetMajorVersion() uint {
	var _cret C.guint // in

	_cret = C.gtk_source_get_major_version()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// GetMicroVersion returns the micro version number of the GtkSourceView
// library. (e.g. in GtkSourceView version 3.20.0 this is 0.)
//
// This function is in the library, so it represents the GtkSourceView library
// your code is running against. Contrast with the K_SOURCE_MICRO_VERSION macro,
// which represents the micro version of the GtkSourceView headers you have
// included when compiling your code.
//
// The function returns the following values:
//
//   - guint: micro version number of the GtkSourceView library.
//
func GetMicroVersion() uint {
	var _cret C.guint // in

	_cret = C.gtk_source_get_micro_version()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// GetMinorVersion returns the minor version number of the GtkSourceView
// library. (e.g. in GtkSourceView version 3.20.0 this is 20.)
//
// This function is in the library, so it represents the GtkSourceView library
// your code is running against. Contrast with the K_SOURCE_MINOR_VERSION macro,
// which represents the minor version of the GtkSourceView headers you have
// included when compiling your code.
//
// The function returns the following values:
//
//   - guint: minor version number of the GtkSourceView library.
//
func GetMinorVersion() uint {
	var _cret C.guint // in

	_cret = C.gtk_source_get_minor_version()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}
