// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// glib.Type values for gtksourcestyle.go.
var GTypeStyle = externglib.Type(C.gtk_source_style_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeStyle, F: marshalStyle},
	})
}

// StyleOverrider contains methods that are overridable.
type StyleOverrider interface {
}

type Style struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Style)(nil)
)

func classInitStyler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapStyle(obj *externglib.Object) *Style {
	return &Style{
		Object: obj,
	}
}

func marshalStyle(p uintptr) (interface{}, error) {
	return wrapStyle(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Apply: this function modifies the TextTag properties that are related to the
// SourceStyle properties. Other TextTag properties are left untouched.
//
// If style is non-NULL, applies style to tag.
//
// If style is NULL, the related *-set properties of TextTag are set to FALSE.
//
// The function takes the following parameters:
//
//    - tag to apply styles to.
//
func (style *Style) Apply(tag *gtk.TextTag) {
	var _arg0 *C.GtkSourceStyle // out
	var _arg1 *C.GtkTextTag     // out

	if style != nil {
		_arg0 = (*C.GtkSourceStyle)(unsafe.Pointer(externglib.InternObject(style).Native()))
	}
	_arg1 = (*C.GtkTextTag)(unsafe.Pointer(externglib.InternObject(tag).Native()))

	C.gtk_source_style_apply(_arg0, _arg1)
	runtime.KeepAlive(style)
	runtime.KeepAlive(tag)
}

// Copy creates a copy of style, that is a new SourceStyle instance which has
// the same attributes set.
//
// The function returns the following values:
//
//    - ret: copy of style, call g_object_unref() when you are done with it.
//
func (style *Style) Copy() *Style {
	var _arg0 *C.GtkSourceStyle // out
	var _cret *C.GtkSourceStyle // in

	_arg0 = (*C.GtkSourceStyle)(unsafe.Pointer(externglib.InternObject(style).Native()))

	_cret = C.gtk_source_style_copy(_arg0)
	runtime.KeepAlive(style)

	var _ret *Style // out

	_ret = wrapStyle(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _ret
}
