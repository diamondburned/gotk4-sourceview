// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

// glib.Type values for gtksourcesearchsettings.go.
var GTypeSearchSettings = externglib.Type(C.gtk_source_search_settings_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSearchSettings, F: marshalSearchSettings},
	})
}

// SearchSettingsOverrider contains methods that are overridable.
type SearchSettingsOverrider interface {
}

type SearchSettings struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*SearchSettings)(nil)
)

func classInitSearchSettingser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSearchSettings(obj *externglib.Object) *SearchSettings {
	return &SearchSettings{
		Object: obj,
	}
}

func marshalSearchSettings(p uintptr) (interface{}, error) {
	return wrapSearchSettings(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSearchSettings creates a new search settings object.
//
// The function returns the following values:
//
//    - searchSettings: new search settings object.
//
func NewSearchSettings() *SearchSettings {
	var _cret *C.GtkSourceSearchSettings // in

	_cret = C.gtk_source_search_settings_new()

	var _searchSettings *SearchSettings // out

	_searchSettings = wrapSearchSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _searchSettings
}

// The function returns the following values:
//
//    - ok: whether to search at word boundaries.
//
func (settings *SearchSettings) AtWordBoundaries() bool {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.gtk_source_search_settings_get_at_word_boundaries(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//    - ok: whether the search is case sensitive.
//
func (settings *SearchSettings) CaseSensitive() bool {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.gtk_source_search_settings_get_case_sensitive(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//    - ok: whether to search by regular expressions.
//
func (settings *SearchSettings) RegexEnabled() bool {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.gtk_source_search_settings_get_regex_enabled(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SearchText gets the text to search. The return value must not be freed.
//
// You may be interested to call gtk_source_utils_escape_search_text() after
// this function.
//
// The function returns the following values:
//
//    - utf8 (optional): text to search, or NULL if the search is disabled.
//
func (settings *SearchSettings) SearchText() string {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.gtk_source_search_settings_get_search_text(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function returns the following values:
//
//    - ok: whether to wrap around the search.
//
func (settings *SearchSettings) WrapAround() bool {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.gtk_source_search_settings_get_wrap_around(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAtWordBoundaries: change whether the search is done at word boundaries. If
// at_word_boundaries is TRUE, a search match must start and end a word. The
// match can span multiple words. See also gtk_text_iter_starts_word() and
// gtk_text_iter_ends_word().
//
// The function takes the following parameters:
//
//    - atWordBoundaries: setting.
//
func (settings *SearchSettings) SetAtWordBoundaries(atWordBoundaries bool) {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _arg1 C.gboolean                 // out

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	if atWordBoundaries {
		_arg1 = C.TRUE
	}

	C.gtk_source_search_settings_set_at_word_boundaries(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(atWordBoundaries)
}

// SetCaseSensitive enables or disables the case sensitivity for the search.
//
// The function takes the following parameters:
//
//    - caseSensitive: setting.
//
func (settings *SearchSettings) SetCaseSensitive(caseSensitive bool) {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _arg1 C.gboolean                 // out

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	if caseSensitive {
		_arg1 = C.TRUE
	}

	C.gtk_source_search_settings_set_case_sensitive(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(caseSensitive)
}

// SetRegexEnabled enables or disables whether to search by regular expressions.
// If enabled, the SourceSearchSettings:search-text property contains the
// pattern of the regular expression.
//
// SourceSearchContext uses #GRegex when regex search is enabled. See the
// Regular expression syntax
// (https://developer.gnome.org/glib/stable/glib-regex-syntax.html) page in the
// GLib reference manual.
//
// The function takes the following parameters:
//
//    - regexEnabled: setting.
//
func (settings *SearchSettings) SetRegexEnabled(regexEnabled bool) {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _arg1 C.gboolean                 // out

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	if regexEnabled {
		_arg1 = C.TRUE
	}

	C.gtk_source_search_settings_set_regex_enabled(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(regexEnabled)
}

// SetSearchText sets the text to search. If search_text is NULL or is empty,
// the search will be disabled. A copy of search_text will be made, so you can
// safely free search_text after a call to this function.
//
// You may be interested to call gtk_source_utils_unescape_search_text() before
// this function.
//
// The function takes the following parameters:
//
//    - searchText (optional): nul-terminated text to search, or NULL to disable
//      the search.
//
func (settings *SearchSettings) SetSearchText(searchText string) {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _arg1 *C.gchar                   // out

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	if searchText != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(searchText)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gtk_source_search_settings_set_search_text(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(searchText)
}

// SetWrapAround enables or disables the wrap around search. If wrap_around is
// TRUE, the forward search continues at the beginning of the buffer if no
// search occurrences are found. Similarly, the backward search continues to
// search at the end of the buffer.
//
// The function takes the following parameters:
//
//    - wrapAround: setting.
//
func (settings *SearchSettings) SetWrapAround(wrapAround bool) {
	var _arg0 *C.GtkSourceSearchSettings // out
	var _arg1 C.gboolean                 // out

	_arg0 = (*C.GtkSourceSearchSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	if wrapAround {
		_arg1 = C.TRUE
	}

	C.gtk_source_search_settings_set_wrap_around(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(wrapAround)
}
