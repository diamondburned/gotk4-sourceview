// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern void _gotk4_gtksource5_SnippetContext_ConnectChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeSnippetContext = coreglib.Type(C.gtk_source_snippet_context_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSnippetContext, F: marshalSnippetContext},
	})
}

// SnippetContextOverrides contains methods that are overridable.
type SnippetContextOverrides struct {
}

func defaultSnippetContextOverrides(v *SnippetContext) SnippetContextOverrides {
	return SnippetContextOverrides{}
}

// SnippetContext: context for expanding snippetchunk.
//
// This class is currently used primary as a hashtable. However, the longer term
// goal is to have it hold onto a GjsContext as well as other languages so that
// snippetchunk can expand themselves by executing script within the context.
//
// The snippet will build the context and then expand each of the chunks during
// the insertion/edit phase.
type SnippetContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SnippetContext)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SnippetContext, *SnippetContextClass, SnippetContextOverrides](
		GTypeSnippetContext,
		initSnippetContextClass,
		wrapSnippetContext,
		defaultSnippetContextOverrides,
	)
}

func initSnippetContextClass(gclass unsafe.Pointer, overrides SnippetContextOverrides, classInitFunc func(*SnippetContextClass)) {
	if classInitFunc != nil {
		class := (*SnippetContextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSnippetContext(obj *coreglib.Object) *SnippetContext {
	return &SnippetContext{
		Object: obj,
	}
}

func marshalSnippetContext(p uintptr) (interface{}, error) {
	return wrapSnippetContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectChanged: signal is emitted when a change has been discovered in one of
// the chunks of the snippet which has caused a variable or other dynamic data
// within the context to have changed.
func (self *SnippetContext) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "changed", false, unsafe.Pointer(C._gotk4_gtksource5_SnippetContext_ConnectChanged), f)
}

// NewSnippetContext creates a new SourceSnippetContext.
//
// Generally, this isn't needed unless you are controlling the expansion of
// snippets manually.
//
// The function returns the following values:
//
//   - snippetContext: SourceSnippetContext.
//
func NewSnippetContext() *SnippetContext {
	var _cret *C.GtkSourceSnippetContext // in

	_cret = C.gtk_source_snippet_context_new()

	var _snippetContext *SnippetContext // out

	_snippetContext = wrapSnippetContext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _snippetContext
}

// ClearVariables removes all variables from the context.
func (self *SnippetContext) ClearVariables() {
	var _arg0 *C.GtkSourceSnippetContext // out

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.gtk_source_snippet_context_clear_variables(_arg0)
	runtime.KeepAlive(self)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (self *SnippetContext) Expand(input string) string {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 *C.gchar                   // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(input)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_source_snippet_context_expand(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(input)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Variable gets the current value for a variable named key.
//
// The function takes the following parameters:
//
//   - key: name of the variable.
//
// The function returns the following values:
//
//   - utf8 (optional): value for the variable, or NULL.
//
func (self *SnippetContext) Variable(key string) string {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 *C.gchar                   // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_source_snippet_context_get_variable(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(key)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetConstant sets a constatnt within the context.
//
// This is similar to a variable set with snippetcontext.SetVariable but is
// expected to not change during use of the snippet.
//
// Examples would be the date or users name.
//
// The function takes the following parameters:
//
//   - key: constant name.
//   - value of the constant.
//
func (self *SnippetContext) SetConstant(key, value string) {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 *C.gchar                   // out
	var _arg2 *C.gchar                   // out

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_source_snippet_context_set_constant(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// The function takes the following parameters:
//
func (self *SnippetContext) SetLinePrefix(linePrefix string) {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 *C.gchar                   // out

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(linePrefix)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_context_set_line_prefix(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(linePrefix)
}

// The function takes the following parameters:
//
func (self *SnippetContext) SetTabWidth(tabWidth int) {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 C.gint                     // out

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gint(tabWidth)

	C.gtk_source_snippet_context_set_tab_width(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tabWidth)
}

// The function takes the following parameters:
//
func (self *SnippetContext) SetUseSpaces(useSpaces bool) {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 C.gboolean                 // out

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if useSpaces {
		_arg1 = C.TRUE
	}

	C.gtk_source_snippet_context_set_use_spaces(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(useSpaces)
}

// SetVariable sets a variable within the context.
//
// This variable may be overridden by future updates to the context.
//
// The function takes the following parameters:
//
//   - key: variable name.
//   - value for the variable.
//
func (self *SnippetContext) SetVariable(key, value string) {
	var _arg0 *C.GtkSourceSnippetContext // out
	var _arg1 *C.gchar                   // out
	var _arg2 *C.gchar                   // out

	_arg0 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_source_snippet_context_set_variable(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SnippetContextClass: instance of this type is always passed by reference.
type SnippetContextClass struct {
	*snippetContextClass
}

// snippetContextClass is the struct that's finalized.
type snippetContextClass struct {
	native *C.GtkSourceSnippetContextClass
}
