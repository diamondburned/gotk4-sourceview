// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_gutter_renderer_alignment_mode_get_type()), F: marshalGutterRendererAlignmentMode},
		{T: externglib.Type(C.gtk_source_gutter_renderer_get_type()), F: marshalGutterRendererer},
	})
}

// GutterRendererAlignmentMode: alignment mode of the renderer, when a cell
// spans multiple lines (due to text wrapping).
type GutterRendererAlignmentMode C.gint

const (
	// SourceGutterRendererAlignmentModeCell: full cell.
	SourceGutterRendererAlignmentModeCell GutterRendererAlignmentMode = iota
	// SourceGutterRendererAlignmentModeFirst: first line.
	SourceGutterRendererAlignmentModeFirst
	// SourceGutterRendererAlignmentModeLast: last line.
	SourceGutterRendererAlignmentModeLast
)

func marshalGutterRendererAlignmentMode(p uintptr) (interface{}, error) {
	return GutterRendererAlignmentMode(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for GutterRendererAlignmentMode.
func (g GutterRendererAlignmentMode) String() string {
	switch g {
	case SourceGutterRendererAlignmentModeCell:
		return "Cell"
	case SourceGutterRendererAlignmentModeFirst:
		return "First"
	case SourceGutterRendererAlignmentModeLast:
		return "Last"
	default:
		return fmt.Sprintf("GutterRendererAlignmentMode(%d)", g)
	}
}

// GutterRendererOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type GutterRendererOverrider interface {
	// Activate emits the SourceGutterRenderer::activate signal of the renderer.
	// This is called from SourceGutter and should never have to be called
	// manually.
	//
	// The function takes the following parameters:
	//
	//    - iter at the start of the line where the renderer is activated.
	//    - area of the cell area where the renderer is activated.
	//    - button that was pressed.
	//    - state: ModifierType.
	//    - nPresses: number of button presses.
	//
	Activate(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int)
	// The function takes the following parameters:
	//
	Begin(lines *GutterLines)
	// ChangeBuffer: this is called when the text buffer changes for renderer.
	//
	// The function takes the following parameters:
	//
	//    - oldBuffer (optional): old TextBuffer.
	//
	ChangeBuffer(oldBuffer *Buffer)
	// ChangeView: this is called when the text view changes for renderer.
	//
	// The function takes the following parameters:
	//
	//    - oldView (optional): old TextView.
	//
	ChangeView(oldView *View)
	End()
	// QueryActivatable: get whether the renderer is activatable at the location
	// provided. This is called from SourceGutter to determine whether a
	// renderer is activatable using the mouse pointer.
	//
	// The function takes the following parameters:
	//
	//    - iter at the start of the line to be activated.
	//    - area of the cell area to be activated.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the renderer can be activated, FALSE otherwise.
	//
	QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle) bool
	// The function takes the following parameters:
	//
	//    - lines
	//    - line
	//
	QueryData(lines *GutterLines, line uint)
	// The function takes the following parameters:
	//
	//    - snapshot
	//    - lines
	//    - line
	//
	SnapshotLine(snapshot *gtk.Snapshot, lines *GutterLines, line uint)
}

type GutterRenderer struct {
	_ [0]func() // equal guard
	gtk.Widget
}

var (
	_ gtk.Widgetter = (*GutterRenderer)(nil)
)

// GutterRendererer describes types inherited from class GutterRenderer.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type GutterRendererer interface {
	externglib.Objector
	baseGutterRenderer() *GutterRenderer
}

var _ GutterRendererer = (*GutterRenderer)(nil)

func wrapGutterRenderer(obj *externglib.Object) *GutterRenderer {
	return &GutterRenderer{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalGutterRendererer(p uintptr) (interface{}, error) {
	return wrapGutterRenderer(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (renderer *GutterRenderer) baseGutterRenderer() *GutterRenderer {
	return renderer
}

// BaseGutterRenderer returns the underlying base object.
func BaseGutterRenderer(obj GutterRendererer) *GutterRenderer {
	return obj.baseGutterRenderer()
}

// ConnectActivate signal is emitted when the renderer is activated.
func (renderer *GutterRenderer) ConnectActivate(f func(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int)) externglib.SignalHandle {
	return renderer.Connect("activate", f)
}

// ConnectQueryActivatable signal is emitted when the renderer can possibly be
// activated.
func (renderer *GutterRenderer) ConnectQueryActivatable(f func(iter *gtk.TextIter, area *gdk.Rectangle) bool) externglib.SignalHandle {
	return renderer.Connect("query-activatable", f)
}

func (renderer *GutterRenderer) ConnectQueryData(f func(object *externglib.Object, p0 uint)) externglib.SignalHandle {
	return renderer.Connect("query-data", f)
}

// Activate emits the SourceGutterRenderer::activate signal of the renderer.
// This is called from SourceGutter and should never have to be called manually.
//
// The function takes the following parameters:
//
//    - iter at the start of the line where the renderer is activated.
//    - area of the cell area where the renderer is activated.
//    - button that was pressed.
//    - state: ModifierType.
//    - nPresses: number of button presses.
//
func (renderer *GutterRenderer) Activate(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 C.guint                    // out
	var _arg4 C.GdkModifierType          // out
	var _arg5 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))
	_arg3 = C.guint(button)
	_arg4 = C.GdkModifierType(state)
	_arg5 = C.gint(nPresses)

	C.gtk_source_gutter_renderer_activate(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)
	runtime.KeepAlive(button)
	runtime.KeepAlive(state)
	runtime.KeepAlive(nPresses)
}

// AlignCell locates where to render content that is width x height based on the
// renderers alignment and padding.
//
// The location will be placed into x and y and is relative to the renderer's
// coordinates.
//
// It is encouraged that renderers use this function when snappshotting to
// ensure consistent placement of their contents.
//
// The function takes the following parameters:
//
//    - line number for content.
//    - width of the content to draw.
//    - height of the content to draw.
//
// The function returns the following values:
//
//    - x: x position to render the content.
//    - y: y position to render the content.
//
func (renderer *GutterRenderer) AlignCell(line uint, width, height float32) (x float32, y float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.guint                    // out
	var _arg2 C.gfloat                   // out
	var _arg3 C.gfloat                   // out
	var _arg4 C.gfloat                   // in
	var _arg5 C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = C.guint(line)
	_arg2 = C.gfloat(width)
	_arg3 = C.gfloat(height)

	C.gtk_source_gutter_renderer_align_cell(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(line)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)

	var _x float32 // out
	var _y float32 // out

	_x = float32(_arg4)
	_y = float32(_arg5)

	return _x, _y
}

// AlignmentMode: get the alignment mode. The alignment mode describes the
// manner in which the renderer is aligned (see :xalign and :yalign).
//
// The function returns the following values:
//
//    - gutterRendererAlignmentMode: SourceGutterRendererAlignmentMode.
//
func (renderer *GutterRenderer) AlignmentMode() GutterRendererAlignmentMode {
	var _arg0 *C.GtkSourceGutterRenderer             // out
	var _cret C.GtkSourceGutterRendererAlignmentMode // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_alignment_mode(_arg0)
	runtime.KeepAlive(renderer)

	var _gutterRendererAlignmentMode GutterRendererAlignmentMode // out

	_gutterRendererAlignmentMode = GutterRendererAlignmentMode(_cret)

	return _gutterRendererAlignmentMode
}

// Buffer gets the SourceBuffer for which the gutter renderer is drawing.
//
// The function returns the following values:
//
//    - buffer (optional) or NULL.
//
func (renderer *GutterRenderer) Buffer() *Buffer {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret *C.GtkSourceBuffer         // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_buffer(_arg0)
	runtime.KeepAlive(renderer)

	var _buffer *Buffer // out

	if _cret != nil {
		_buffer = wrapBuffer(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _buffer
}

// View: get the view associated to the gutter renderer.
//
// The function returns the following values:
//
//    - view: SourceView.
//
func (renderer *GutterRenderer) View() *View {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret *C.GtkSourceView           // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_view(_arg0)
	runtime.KeepAlive(renderer)

	var _view *View // out

	_view = wrapView(externglib.Take(unsafe.Pointer(_cret)))

	return _view
}

// XAlign gets the "xalign" property of the SourceGutterRenderer. This may be
// used to adjust where within the cell rectangle the renderer will draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) XAlign() float32 {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_xalign(_arg0)
	runtime.KeepAlive(renderer)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Xpad gets the "xpad" property of the SourceGutterRenderer. This may be used
// to adjust the cell rectangle that the renderer will use to draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) Xpad() int {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gint                     // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_xpad(_arg0)
	runtime.KeepAlive(renderer)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// YAlign gets the "yalign" property of the SourceGutterRenderer. This may be
// used to adjust where within the cell rectangle the renderer will draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) YAlign() float32 {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_yalign(_arg0)
	runtime.KeepAlive(renderer)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Ypad gets the "ypad" property of the SourceGutterRenderer. This may be used
// to adjust the cell rectangle that the renderer will use to draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) Ypad() int {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gint                     // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))

	_cret = C.gtk_source_gutter_renderer_get_ypad(_arg0)
	runtime.KeepAlive(renderer)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// QueryActivatable: get whether the renderer is activatable at the location
// provided. This is called from SourceGutter to determine whether a renderer is
// activatable using the mouse pointer.
//
// The function takes the following parameters:
//
//    - iter at the start of the line to be activated.
//    - area of the cell area to be activated.
//
// The function returns the following values:
//
//    - ok: TRUE if the renderer can be activated, FALSE otherwise.
//
func (renderer *GutterRenderer) QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle) bool {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))

	_cret = C.gtk_source_gutter_renderer_query_activatable(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAlignmentMode: set the alignment mode. The alignment mode describes the
// manner in which the renderer is aligned (see SourceGutterRenderer:xalign and
// SourceGutterRenderer:yalign).
//
// The function takes the following parameters:
//
//    - mode: SourceGutterRendererAlignmentMode.
//
func (renderer *GutterRenderer) SetAlignmentMode(mode GutterRendererAlignmentMode) {
	var _arg0 *C.GtkSourceGutterRenderer             // out
	var _arg1 C.GtkSourceGutterRendererAlignmentMode // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = C.GtkSourceGutterRendererAlignmentMode(mode)

	C.gtk_source_gutter_renderer_set_alignment_mode(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(mode)
}

// SetXAlign adjusts the "xalign" property of the SourceGutterRenderer. This may
// be used to adjust where within the cell rectangle the renderer will draw.
//
// The function takes the following parameters:
//
//    - xalign: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetXAlign(xalign float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gfloat                   // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = C.gfloat(xalign)

	C.gtk_source_gutter_renderer_set_xalign(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(xalign)
}

// SetXpad adjusts the "xpad" property of the SourceGutterRenderer. This may be
// used to adjust the cell rectangle that the renderer will use to draw.
//
// The function takes the following parameters:
//
//    - xpad: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetXpad(xpad int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = C.gint(xpad)

	C.gtk_source_gutter_renderer_set_xpad(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(xpad)
}

// SetYAlign adjusts the "yalign" property of the SourceGutterRenderer. This may
// be used to adjust where within the cell rectangle the renderer will draw.
//
// The function takes the following parameters:
//
//    - yalign: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetYAlign(yalign float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gfloat                   // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = C.gfloat(yalign)

	C.gtk_source_gutter_renderer_set_yalign(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(yalign)
}

// SetYpad adjusts the "ypad" property of the SourceGutterRenderer. This may be
// used to adjust the cell rectangle that the renderer will use to draw.
//
// The function takes the following parameters:
//
//    - ypad: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetYpad(ypad int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(renderer.Native()))
	_arg1 = C.gint(ypad)

	C.gtk_source_gutter_renderer_set_ypad(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(ypad)
}
