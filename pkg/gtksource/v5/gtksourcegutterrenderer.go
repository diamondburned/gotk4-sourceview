// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern void _gotk4_gtksource5_GutterRenderer_ConnectQueryData(gpointer, GObject, guint, guintptr);
// extern void _gotk4_gtksource5_GutterRenderer_ConnectActivate(gpointer, GtkTextIter*, GdkRectangle*, guint, GdkModifierType, gint, guintptr);
// extern void _gotk4_gtksource5_GutterRendererClass_snapshot_line(GtkSourceGutterRenderer*, GtkSnapshot*, GtkSourceGutterLines*, guint);
// extern void _gotk4_gtksource5_GutterRendererClass_query_data(GtkSourceGutterRenderer*, GtkSourceGutterLines*, guint);
// extern void _gotk4_gtksource5_GutterRendererClass_end(GtkSourceGutterRenderer*);
// extern void _gotk4_gtksource5_GutterRendererClass_change_view(GtkSourceGutterRenderer*, GtkSourceView*);
// extern void _gotk4_gtksource5_GutterRendererClass_change_buffer(GtkSourceGutterRenderer*, GtkSourceBuffer*);
// extern void _gotk4_gtksource5_GutterRendererClass_begin(GtkSourceGutterRenderer*, GtkSourceGutterLines*);
// extern void _gotk4_gtksource5_GutterRendererClass_activate(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*, guint, GdkModifierType, gint);
// extern gboolean _gotk4_gtksource5_GutterRenderer_ConnectQueryActivatable(gpointer, GtkTextIter*, GdkRectangle*, guintptr);
// extern gboolean _gotk4_gtksource5_GutterRendererClass_query_activatable(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*);
// gboolean _gotk4_gtksource5_GutterRenderer_virtual_query_activatable(void* fnptr, GtkSourceGutterRenderer* arg0, GtkTextIter* arg1, GdkRectangle* arg2) {
//   return ((gboolean (*)(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_activate(void* fnptr, GtkSourceGutterRenderer* arg0, GtkTextIter* arg1, GdkRectangle* arg2, guint arg3, GdkModifierType arg4, gint arg5) {
//   ((void (*)(GtkSourceGutterRenderer*, GtkTextIter*, GdkRectangle*, guint, GdkModifierType, gint))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_begin(void* fnptr, GtkSourceGutterRenderer* arg0, GtkSourceGutterLines* arg1) {
//   ((void (*)(GtkSourceGutterRenderer*, GtkSourceGutterLines*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_change_buffer(void* fnptr, GtkSourceGutterRenderer* arg0, GtkSourceBuffer* arg1) {
//   ((void (*)(GtkSourceGutterRenderer*, GtkSourceBuffer*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_change_view(void* fnptr, GtkSourceGutterRenderer* arg0, GtkSourceView* arg1) {
//   ((void (*)(GtkSourceGutterRenderer*, GtkSourceView*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_end(void* fnptr, GtkSourceGutterRenderer* arg0) {
//   ((void (*)(GtkSourceGutterRenderer*))(fnptr))(arg0);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_query_data(void* fnptr, GtkSourceGutterRenderer* arg0, GtkSourceGutterLines* arg1, guint arg2) {
//   ((void (*)(GtkSourceGutterRenderer*, GtkSourceGutterLines*, guint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtksource5_GutterRenderer_virtual_snapshot_line(void* fnptr, GtkSourceGutterRenderer* arg0, GtkSnapshot* arg1, GtkSourceGutterLines* arg2, guint arg3) {
//   ((void (*)(GtkSourceGutterRenderer*, GtkSnapshot*, GtkSourceGutterLines*, guint))(fnptr))(arg0, arg1, arg2, arg3);
// };
import "C"

// GType values.
var (
	GTypeGutterRendererAlignmentMode = coreglib.Type(C.gtk_source_gutter_renderer_alignment_mode_get_type())
	GTypeGutterRenderer              = coreglib.Type(C.gtk_source_gutter_renderer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGutterRendererAlignmentMode, F: marshalGutterRendererAlignmentMode},
		coreglib.TypeMarshaler{T: GTypeGutterRenderer, F: marshalGutterRenderer},
	})
}

// GutterRendererAlignmentMode: alignment mode of the renderer, when a cell
// spans multiple lines (due to text wrapping).
type GutterRendererAlignmentMode C.gint

const (
	// SourceGutterRendererAlignmentModeCell: full cell.
	SourceGutterRendererAlignmentModeCell GutterRendererAlignmentMode = iota
	// SourceGutterRendererAlignmentModeFirst: first line.
	SourceGutterRendererAlignmentModeFirst
	// SourceGutterRendererAlignmentModeLast: last line.
	SourceGutterRendererAlignmentModeLast
)

func marshalGutterRendererAlignmentMode(p uintptr) (interface{}, error) {
	return GutterRendererAlignmentMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for GutterRendererAlignmentMode.
func (g GutterRendererAlignmentMode) String() string {
	switch g {
	case SourceGutterRendererAlignmentModeCell:
		return "Cell"
	case SourceGutterRendererAlignmentModeFirst:
		return "First"
	case SourceGutterRendererAlignmentModeLast:
		return "Last"
	default:
		return fmt.Sprintf("GutterRendererAlignmentMode(%d)", g)
	}
}

// GutterRendererOverrides contains methods that are overridable.
type GutterRendererOverrides struct {
	// Activate emits the gutterrenderer::activate signal of the renderer.
	// This is called from gutter and should never have to be called manually.
	//
	// The function takes the following parameters:
	//
	//   - iter at the start of the line where the renderer is activated.
	//   - area of the cell area where the renderer is activated.
	//   - button that was pressed.
	//   - state: ModifierType.
	//   - nPresses: number of button presses.
	//
	Activate func(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int)
	// The function takes the following parameters:
	//
	Begin func(lines *GutterLines)
	// ChangeBuffer: this is called when the text buffer changes for renderer.
	//
	// The function takes the following parameters:
	//
	//   - oldBuffer (optional): old TextBuffer.
	//
	ChangeBuffer func(oldBuffer *Buffer)
	// ChangeView: this is called when the text view changes for renderer.
	//
	// The function takes the following parameters:
	//
	//   - oldView (optional): old TextView.
	//
	ChangeView func(oldView *View)
	End        func()
	// QueryActivatable: get whether the renderer is activatable at the location
	// provided. This is called from gutter to determine whether a renderer is
	// activatable using the mouse pointer.
	//
	// The function takes the following parameters:
	//
	//   - iter at the start of the line to be activated.
	//   - area of the cell area to be activated.
	//
	// The function returns the following values:
	//
	//   - ok: TRUE if the renderer can be activated, FALSE otherwise.
	//
	QueryActivatable func(iter *gtk.TextIter, area *gdk.Rectangle) bool
	// The function takes the following parameters:
	//
	//   - lines
	//   - line
	//
	QueryData func(lines *GutterLines, line uint)
	// The function takes the following parameters:
	//
	//   - snapshot
	//   - lines
	//   - line
	//
	SnapshotLine func(snapshot *gtk.Snapshot, lines *GutterLines, line uint)
}

func defaultGutterRendererOverrides(v *GutterRenderer) GutterRendererOverrides {
	return GutterRendererOverrides{
		Activate:         v.activate,
		Begin:            v.begin,
		ChangeBuffer:     v.changeBuffer,
		ChangeView:       v.changeView,
		End:              v.end,
		QueryActivatable: v.queryActivatable,
		QueryData:        v.queryData,
		SnapshotLine:     v.snapshotLine,
	}
}

// GutterRenderer: gutter cell renderer.
//
// A GtkSourceGutterRenderer represents a column in a gutter. The column
// contains one cell for each visible line of the gtk.TextBuffer. Due to text
// wrapping, a cell can thus span multiple lines of the gtk.TextView. In this
// case, gutterrendereralignmentmode controls the alignment of the cell.
//
// The gutter renderer is a gtk.Widget and is measured using the normal widget
// measurement facilities. The width of the gutter will be determined by the
// measurements of the gutter renderers.
//
// The width of a gutter renderer generally takes into account the entire text
// buffer. For instance, to display the line numbers, if the buffer contains
// 100 lines, the gutter renderer will always set its width such as three
// digits can be printed, even if only the first 20 lines are shown. Another
// strategy is to take into account only the visible lines. In this case, only
// two digits are necessary to display the line numbers of the first 20 lines.
// To take another example, the gutter renderer for marks doesn't need to take
// into account the text buffer to announce its width. It only depends on the
// icons size displayed in the gutter column.
//
// When the available size to render a cell is greater than the required size to
// render the cell contents, the cell contents can be aligned horizontally and
// vertically with gutterrenderer.SetAlignmentMode.
//
// The cells rendering occurs using gtk.Widget.Snapshot(). Implementations
// should use gtk_source_gutter_renderer_get_lines() to retrieve information
// about the lines to be rendered. To help with aligning content which takes
// into account the padding and alignment of a cell, implementations may call
// gutterrenderer.AlignCell for a given line number with the width and height
// measurement of the content they width to render.
type GutterRenderer struct {
	_ [0]func() // equal guard
	gtk.Widget
}

var (
	_ gtk.Widgetter = (*GutterRenderer)(nil)
)

// GutterRendererer describes types inherited from class GutterRenderer.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type GutterRendererer interface {
	coreglib.Objector
	baseGutterRenderer() *GutterRenderer
}

var _ GutterRendererer = (*GutterRenderer)(nil)

func init() {
	coreglib.RegisterClassInfo[*GutterRenderer, *GutterRendererClass, GutterRendererOverrides](
		GTypeGutterRenderer,
		initGutterRendererClass,
		wrapGutterRenderer,
		defaultGutterRendererOverrides,
	)
}

func initGutterRendererClass(gclass unsafe.Pointer, overrides GutterRendererOverrides, classInitFunc func(*GutterRendererClass)) {
	pclass := (*C.GtkSourceGutterRendererClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeGutterRenderer))))

	if overrides.Activate != nil {
		pclass.activate = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_activate)
	}

	if overrides.Begin != nil {
		pclass.begin = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_begin)
	}

	if overrides.ChangeBuffer != nil {
		pclass.change_buffer = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_change_buffer)
	}

	if overrides.ChangeView != nil {
		pclass.change_view = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_change_view)
	}

	if overrides.End != nil {
		pclass.end = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_end)
	}

	if overrides.QueryActivatable != nil {
		pclass.query_activatable = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_query_activatable)
	}

	if overrides.QueryData != nil {
		pclass.query_data = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_query_data)
	}

	if overrides.SnapshotLine != nil {
		pclass.snapshot_line = (*[0]byte)(C._gotk4_gtksource5_GutterRendererClass_snapshot_line)
	}

	if classInitFunc != nil {
		class := (*GutterRendererClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGutterRenderer(obj *coreglib.Object) *GutterRenderer {
	return &GutterRenderer{
		Widget: gtk.Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalGutterRenderer(p uintptr) (interface{}, error) {
	return wrapGutterRenderer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (renderer *GutterRenderer) baseGutterRenderer() *GutterRenderer {
	return renderer
}

// BaseGutterRenderer returns the underlying base object.
func BaseGutterRenderer(obj GutterRendererer) *GutterRenderer {
	return obj.baseGutterRenderer()
}

// ConnectActivate: signal is emitted when the renderer is activated.
func (renderer *GutterRenderer) ConnectActivate(f func(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(renderer, "activate", false, unsafe.Pointer(C._gotk4_gtksource5_GutterRenderer_ConnectActivate), f)
}

// ConnectQueryActivatable: signal is emitted when the renderer can possibly be
// activated.
func (renderer *GutterRenderer) ConnectQueryActivatable(f func(iter *gtk.TextIter, area *gdk.Rectangle) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(renderer, "query-activatable", false, unsafe.Pointer(C._gotk4_gtksource5_GutterRenderer_ConnectQueryActivatable), f)
}

func (renderer *GutterRenderer) ConnectQueryData(f func(object *coreglib.Object, p0 uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(renderer, "query-data", false, unsafe.Pointer(C._gotk4_gtksource5_GutterRenderer_ConnectQueryData), f)
}

// Activate emits the gutterrenderer::activate signal of the renderer. This is
// called from gutter and should never have to be called manually.
//
// The function takes the following parameters:
//
//   - iter at the start of the line where the renderer is activated.
//   - area of the cell area where the renderer is activated.
//   - button that was pressed.
//   - state: ModifierType.
//   - nPresses: number of button presses.
//
func (renderer *GutterRenderer) Activate(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 C.guint                    // out
	var _arg4 C.GdkModifierType          // out
	var _arg5 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))
	_arg3 = C.guint(button)
	_arg4 = C.GdkModifierType(state)
	_arg5 = C.gint(nPresses)

	C.gtk_source_gutter_renderer_activate(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)
	runtime.KeepAlive(button)
	runtime.KeepAlive(state)
	runtime.KeepAlive(nPresses)
}

// AlignCell locates where to render content that is width x height based on the
// renderers alignment and padding.
//
// The location will be placed into x and y and is relative to the renderer's
// coordinates.
//
// It is encouraged that renderers use this function when snappshotting to
// ensure consistent placement of their contents.
//
// The function takes the following parameters:
//
//   - line number for content.
//   - width of the content to draw.
//   - height of the content to draw.
//
// The function returns the following values:
//
//   - x: x position to render the content.
//   - y: y position to render the content.
//
func (renderer *GutterRenderer) AlignCell(line uint, width, height float32) (x, y float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.guint                    // out
	var _arg2 C.gfloat                   // out
	var _arg3 C.gfloat                   // out
	var _arg4 C.gfloat                   // in
	var _arg5 C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.guint(line)
	_arg2 = C.gfloat(width)
	_arg3 = C.gfloat(height)

	C.gtk_source_gutter_renderer_align_cell(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(line)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)

	var _x float32 // out
	var _y float32 // out

	_x = float32(_arg4)
	_y = float32(_arg5)

	return _x, _y
}

// AlignmentMode: get the alignment mode.
//
// The alignment mode describes the manner in which the renderer is aligned (see
// gutterrenderer:xalign and gutterrenderer:yalign).
//
// The function returns the following values:
//
//   - gutterRendererAlignmentMode: SourceGutterRendererAlignmentMode.
//
func (renderer *GutterRenderer) AlignmentMode() GutterRendererAlignmentMode {
	var _arg0 *C.GtkSourceGutterRenderer             // out
	var _cret C.GtkSourceGutterRendererAlignmentMode // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_alignment_mode(_arg0)
	runtime.KeepAlive(renderer)

	var _gutterRendererAlignmentMode GutterRendererAlignmentMode // out

	_gutterRendererAlignmentMode = GutterRendererAlignmentMode(_cret)

	return _gutterRendererAlignmentMode
}

// Buffer gets the buffer for which the gutter renderer is drawing.
//
// The function returns the following values:
//
//   - buffer (optional) or NULL.
//
func (renderer *GutterRenderer) Buffer() *Buffer {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret *C.GtkSourceBuffer         // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_buffer(_arg0)
	runtime.KeepAlive(renderer)

	var _buffer *Buffer // out

	if _cret != nil {
		_buffer = wrapBuffer(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _buffer
}

// View: get the view associated to the gutter renderer.
//
// The function returns the following values:
//
//   - view: SourceView.
//
func (renderer *GutterRenderer) View() *View {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret *C.GtkSourceView           // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_view(_arg0)
	runtime.KeepAlive(renderer)

	var _view *View // out

	_view = wrapView(coreglib.Take(unsafe.Pointer(_cret)))

	return _view
}

// XAlign gets the xalign property.
//
// This may be used to adjust where within the cell rectangle the renderer will
// draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) XAlign() float32 {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_xalign(_arg0)
	runtime.KeepAlive(renderer)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Xpad gets the xpad property.
//
// This may be used to adjust the cell rectangle that the renderer will use to
// draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) Xpad() int {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gint                     // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_xpad(_arg0)
	runtime.KeepAlive(renderer)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// YAlign gets the yalign property.
//
// This may be used to adjust where within the cell rectangle the renderer will
// draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) YAlign() float32 {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gfloat                   // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_yalign(_arg0)
	runtime.KeepAlive(renderer)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Ypad gets the ypad property.
//
// This may be used to adjust the cell rectangle that the renderer will use to
// draw.
//
// The function returns the following values:
//
func (renderer *GutterRenderer) Ypad() int {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _cret C.gint                     // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_source_gutter_renderer_get_ypad(_arg0)
	runtime.KeepAlive(renderer)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// QueryActivatable: get whether the renderer is activatable at the location
// provided. This is called from gutter to determine whether a renderer is
// activatable using the mouse pointer.
//
// The function takes the following parameters:
//
//   - iter at the start of the line to be activated.
//   - area of the cell area to be activated.
//
// The function returns the following values:
//
//   - ok: TRUE if the renderer can be activated, FALSE otherwise.
//
func (renderer *GutterRenderer) QueryActivatable(iter *gtk.TextIter, area *gdk.Rectangle) bool {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))

	_cret = C.gtk_source_gutter_renderer_query_activatable(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAlignmentMode: set the alignment mode. The alignment mode describes
// the manner in which the renderer is aligned (see gutterrenderer:xalign and
// gutterrenderer:yalign).
//
// The function takes the following parameters:
//
//   - mode: SourceGutterRendererAlignmentMode.
//
func (renderer *GutterRenderer) SetAlignmentMode(mode GutterRendererAlignmentMode) {
	var _arg0 *C.GtkSourceGutterRenderer             // out
	var _arg1 C.GtkSourceGutterRendererAlignmentMode // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.GtkSourceGutterRendererAlignmentMode(mode)

	C.gtk_source_gutter_renderer_set_alignment_mode(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(mode)
}

// SetXAlign adjusts the xalign property.
//
// This may be used to adjust where within the cell rectangle the renderer will
// draw.
//
// The function takes the following parameters:
//
//   - xalign: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetXAlign(xalign float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gfloat                   // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.gfloat(xalign)

	C.gtk_source_gutter_renderer_set_xalign(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(xalign)
}

// SetXpad adjusts the xpad property.
//
// This may be used to adjust the cell rectangle that the renderer will use to
// draw.
//
// The function takes the following parameters:
//
//   - xpad: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetXpad(xpad int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.gint(xpad)

	C.gtk_source_gutter_renderer_set_xpad(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(xpad)
}

// SetYAlign adjusts the yalign property.
//
// This may be used to adjust where within the cell rectangle the renderer will
// draw.
//
// The function takes the following parameters:
//
//   - yalign: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetYAlign(yalign float32) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gfloat                   // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.gfloat(yalign)

	C.gtk_source_gutter_renderer_set_yalign(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(yalign)
}

// SetYpad adjusts the ypad property.
//
// This may be used to adjust the cell rectangle that the renderer will use to
// draw.
//
// The function takes the following parameters:
//
//   - ypad: y padding for the drawing cell.
//
func (renderer *GutterRenderer) SetYpad(ypad int) {
	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.gint(ypad)

	C.gtk_source_gutter_renderer_set_ypad(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(ypad)
}

// Activate emits the gutterrenderer::activate signal of the renderer. This is
// called from gutter and should never have to be called manually.
//
// The function takes the following parameters:
//
//   - iter at the start of the line where the renderer is activated.
//   - area of the cell area where the renderer is activated.
//   - button that was pressed.
//   - state: ModifierType.
//   - nPresses: number of button presses.
//
func (renderer *GutterRenderer) activate(iter *gtk.TextIter, area *gdk.Rectangle, button uint, state gdk.ModifierType, nPresses int) {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.activate

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _arg3 C.guint                    // out
	var _arg4 C.GdkModifierType          // out
	var _arg5 C.gint                     // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))
	_arg3 = C.guint(button)
	_arg4 = C.GdkModifierType(state)
	_arg5 = C.gint(nPresses)

	C._gotk4_gtksource5_GutterRenderer_virtual_activate(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)
	runtime.KeepAlive(button)
	runtime.KeepAlive(state)
	runtime.KeepAlive(nPresses)
}

// The function takes the following parameters:
//
func (renderer *GutterRenderer) begin(lines *GutterLines) {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.begin

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkSourceGutterLines    // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkSourceGutterLines)(unsafe.Pointer(coreglib.InternObject(lines).Native()))

	C._gotk4_gtksource5_GutterRenderer_virtual_begin(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(lines)
}

// changeBuffer: this is called when the text buffer changes for renderer.
//
// The function takes the following parameters:
//
//   - oldBuffer (optional): old TextBuffer.
//
func (renderer *GutterRenderer) changeBuffer(oldBuffer *Buffer) {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.change_buffer

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkSourceBuffer         // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	if oldBuffer != nil {
		_arg1 = (*C.GtkSourceBuffer)(unsafe.Pointer(coreglib.InternObject(oldBuffer).Native()))
	}

	C._gotk4_gtksource5_GutterRenderer_virtual_change_buffer(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(oldBuffer)
}

// changeView: this is called when the text view changes for renderer.
//
// The function takes the following parameters:
//
//   - oldView (optional): old TextView.
//
func (renderer *GutterRenderer) changeView(oldView *View) {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.change_view

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkSourceView           // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	if oldView != nil {
		_arg1 = (*C.GtkSourceView)(unsafe.Pointer(coreglib.InternObject(oldView).Native()))
	}

	C._gotk4_gtksource5_GutterRenderer_virtual_change_view(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(oldView)
}

func (renderer *GutterRenderer) end() {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.end

	var _arg0 *C.GtkSourceGutterRenderer // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	C._gotk4_gtksource5_GutterRenderer_virtual_end(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(renderer)
}

// queryActivatable: get whether the renderer is activatable at the location
// provided. This is called from gutter to determine whether a renderer is
// activatable using the mouse pointer.
//
// The function takes the following parameters:
//
//   - iter at the start of the line to be activated.
//   - area of the cell area to be activated.
//
// The function returns the following values:
//
//   - ok: TRUE if the renderer can be activated, FALSE otherwise.
//
func (renderer *GutterRenderer) queryActivatable(iter *gtk.TextIter, area *gdk.Rectangle) bool {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.query_activatable

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkTextIter             // out
	var _arg2 *C.GdkRectangle            // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))

	_cret = C._gotk4_gtksource5_GutterRenderer_virtual_query_activatable(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - lines
//   - line
//
func (renderer *GutterRenderer) queryData(lines *GutterLines, line uint) {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.query_data

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkSourceGutterLines    // out
	var _arg2 C.guint                    // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkSourceGutterLines)(unsafe.Pointer(coreglib.InternObject(lines).Native()))
	_arg2 = C.guint(line)

	C._gotk4_gtksource5_GutterRenderer_virtual_query_data(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(lines)
	runtime.KeepAlive(line)
}

// The function takes the following parameters:
//
//   - snapshot
//   - lines
//   - line
//
func (renderer *GutterRenderer) snapshotLine(snapshot *gtk.Snapshot, lines *GutterLines, line uint) {
	gclass := (*C.GtkSourceGutterRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.snapshot_line

	var _arg0 *C.GtkSourceGutterRenderer // out
	var _arg1 *C.GtkSnapshot             // out
	var _arg2 *C.GtkSourceGutterLines    // out
	var _arg3 C.guint                    // out

	_arg0 = (*C.GtkSourceGutterRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.GtkSnapshot)(unsafe.Pointer(coreglib.InternObject(snapshot).Native()))
	_arg2 = (*C.GtkSourceGutterLines)(unsafe.Pointer(coreglib.InternObject(lines).Native()))
	_arg3 = C.guint(line)

	C._gotk4_gtksource5_GutterRenderer_virtual_snapshot_line(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(lines)
	runtime.KeepAlive(line)
}

// GutterRendererClass: instance of this type is always passed by reference.
type GutterRendererClass struct {
	*gutterRendererClass
}

// gutterRendererClass is the struct that's finalized.
type gutterRendererClass struct {
	native *C.GtkSourceGutterRendererClass
}

func (g *GutterRendererClass) ParentClass() *gtk.WidgetClass {
	valptr := &g.native.parent_class
	var _v *gtk.WidgetClass // out
	_v = (*gtk.WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
