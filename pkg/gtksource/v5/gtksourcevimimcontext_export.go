// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

//export _gotk4_gtksource5_VimIMContext_ConnectEdit
func _gotk4_gtksource5_VimIMContext_ConnectEdit(arg0 C.gpointer, arg1 *C.GtkSourceView, arg2 *C.gchar, arg3 C.guintptr) {
	var f func(view *View, path string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(view *View, path string))
	}

	var _view *View  // out
	var _path string // out

	_view = wrapView(coreglib.Take(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_path = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	}

	f(_view, _path)
}

//export _gotk4_gtksource5_VimIMContext_ConnectExecuteCommand
func _gotk4_gtksource5_VimIMContext_ConnectExecuteCommand(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) (cret C.gboolean) {
	var f func(command string) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(command string) (ok bool))
	}

	var _command string // out

	_command = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	ok := f(_command)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtksource5_VimIMContext_ConnectFormatText
func _gotk4_gtksource5_VimIMContext_ConnectFormatText(arg0 C.gpointer, arg1 *C.GtkTextIter, arg2 *C.GtkTextIter, arg3 C.guintptr) {
	var f func(begin, end *gtk.TextIter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(begin, end *gtk.TextIter))
	}

	var _begin *gtk.TextIter // out
	var _end *gtk.TextIter   // out

	_begin = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_end = (*gtk.TextIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_begin, _end)
}

//export _gotk4_gtksource5_VimIMContext_ConnectWrite
func _gotk4_gtksource5_VimIMContext_ConnectWrite(arg0 C.gpointer, arg1 *C.GtkSourceView, arg2 *C.gchar, arg3 C.guintptr) {
	var f func(view *View, path string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(view *View, path string))
	}

	var _view *View  // out
	var _path string // out

	_view = wrapView(coreglib.Take(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_path = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	}

	f(_view, _path)
}
