// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_snippet_chunk_get_type()), F: marshalSnippetChunker},
	})
}

type SnippetChunk struct {
	_ [0]func() // equal guard
	externglib.InitiallyUnowned
}

var ()

func wrapSnippetChunk(obj *externglib.Object) *SnippetChunk {
	return &SnippetChunk{
		InitiallyUnowned: externglib.InitiallyUnowned{
			Object: obj,
		},
	}
}

func marshalSnippetChunker(p uintptr) (interface{}, error) {
	return wrapSnippetChunk(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSnippetChunk: create a new SourceSnippetChunk that can be added to a
// SourceSnippet.
//
// The function returns the following values:
//
func NewSnippetChunk() *SnippetChunk {
	var _cret *C.GtkSourceSnippetChunk // in

	_cret = C.gtk_source_snippet_chunk_new()

	var _snippetChunk *SnippetChunk // out

	_snippetChunk = wrapSnippetChunk(externglib.Take(unsafe.Pointer(_cret)))

	return _snippetChunk
}

// Copy copies the source snippet.
//
// The function returns the following values:
//
//    - snippetChunk: SourceSnippetChunk.
//
func (chunk *SnippetChunk) Copy() *SnippetChunk {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _cret *C.GtkSourceSnippetChunk // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_copy(_arg0)
	runtime.KeepAlive(chunk)

	var _snippetChunk *SnippetChunk // out

	_snippetChunk = wrapSnippetChunk(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _snippetChunk
}

// Context gets the context for the snippet insertion.
//
// The function returns the following values:
//
//    - snippetContext: SourceSnippetContext.
//
func (chunk *SnippetChunk) Context() *SnippetContext {
	var _arg0 *C.GtkSourceSnippetChunk   // out
	var _cret *C.GtkSourceSnippetContext // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_get_context(_arg0)
	runtime.KeepAlive(chunk)

	var _snippetContext *SnippetContext // out

	_snippetContext = wrapSnippetContext(externglib.Take(unsafe.Pointer(_cret)))

	return _snippetContext
}

// FocusPosition gets the SourceSnippetChunk:focus-position.
//
// The focus-position is used to determine how many tabs it takes for the
// snippet to advanced to this chunk.
//
// A focus-position of zero will be the last focus position of the snippet and
// snippet editing ends when it has been reached.
//
// A focus-position of -1 means the chunk cannot be focused by the user.
//
// The function returns the following values:
//
//    - gint: focus-position.
//
func (chunk *SnippetChunk) FocusPosition() int {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _cret C.gint                   // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_get_focus_position(_arg0)
	runtime.KeepAlive(chunk)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Spec gets the specification for the chunk.
//
// The specification is evaluated for variables when other chunks are edited
// within the snippet context. If the user has changed the text, the
// SourceSnippetChunk:text and SourceSnippetChunk:text-set properties are
// updated.
//
// The function returns the following values:
//
//    - utf8 (optional): specification, if any.
//
func (chunk *SnippetChunk) Spec() string {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_get_spec(_arg0)
	runtime.KeepAlive(chunk)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Text gets the SourceSnippetChunk:text property.
//
// The text property is updated when the user edits the text of the chunk. If it
// has not been edited, the SourceSnippetChunk:spec property is returned.
//
// The function returns the following values:
//
//    - utf8: text of the chunk.
//
func (chunk *SnippetChunk) Text() string {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_get_text(_arg0)
	runtime.KeepAlive(chunk)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// TextSet gets the SourceSnippetChunk:text-set property.
//
// This is typically set when the user has edited a snippet chunk.
//
// The function returns the following values:
//
func (chunk *SnippetChunk) TextSet() bool {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_get_text_set(_arg0)
	runtime.KeepAlive(chunk)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (chunk *SnippetChunk) TooltipText() string {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _cret *C.char                  // in

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))

	_cret = C.gtk_source_snippet_chunk_get_tooltip_text(_arg0)
	runtime.KeepAlive(chunk)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
func (chunk *SnippetChunk) SetContext(context *SnippetContext) {
	var _arg0 *C.GtkSourceSnippetChunk   // out
	var _arg1 *C.GtkSourceSnippetContext // out

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))
	_arg1 = (*C.GtkSourceSnippetContext)(unsafe.Pointer(context.Native()))

	C.gtk_source_snippet_chunk_set_context(_arg0, _arg1)
	runtime.KeepAlive(chunk)
	runtime.KeepAlive(context)
}

// SetFocusPosition sets the SourceSnippetChunk:focus-position property.
//
// The focus-position is used to determine how many tabs it takes for the
// snippet to advanced to this chunk.
//
// A focus-position of zero will be the last focus position of the snippet and
// snippet editing ends when it has been reached.
//
// A focus-position of -1 means the chunk cannot be focused by the user.
//
// The function takes the following parameters:
//
//    - focusPosition: focus-position.
//
func (chunk *SnippetChunk) SetFocusPosition(focusPosition int) {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _arg1 C.gint                   // out

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))
	_arg1 = C.gint(focusPosition)

	C.gtk_source_snippet_chunk_set_focus_position(_arg0, _arg1)
	runtime.KeepAlive(chunk)
	runtime.KeepAlive(focusPosition)
}

// SetSpec sets the specification for the chunk.
//
// The specification is evaluated for variables when other chunks are edited
// within the snippet context. If the user has changed the text, the
// SourceSnippetChunk:text and SourceSnippetChunk:text-set properties are
// updated.
//
// The function takes the following parameters:
//
//    - spec: new specification for the chunk.
//
func (chunk *SnippetChunk) SetSpec(spec string) {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(spec)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_chunk_set_spec(_arg0, _arg1)
	runtime.KeepAlive(chunk)
	runtime.KeepAlive(spec)
}

// SetText sets the text for the snippet chunk.
//
// This is usually used by the snippet engine to update the text, but may be
// useful when creating custom snippets to avoid expansion of any specification.
//
// The function takes the following parameters:
//
//    - text of the property.
//
func (chunk *SnippetChunk) SetText(text string) {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_chunk_set_text(_arg0, _arg1)
	runtime.KeepAlive(chunk)
	runtime.KeepAlive(text)
}

// SetTextSet sets the SourceSnippetChunk:text-set property.
//
// This is typically set when the user has edited a snippet chunk by the snippet
// engine.
//
// The function takes the following parameters:
//
//    - textSet: property value.
//
func (chunk *SnippetChunk) SetTextSet(textSet bool) {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _arg1 C.gboolean               // out

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))
	if textSet {
		_arg1 = C.TRUE
	}

	C.gtk_source_snippet_chunk_set_text_set(_arg0, _arg1)
	runtime.KeepAlive(chunk)
	runtime.KeepAlive(textSet)
}

// The function takes the following parameters:
//
func (chunk *SnippetChunk) SetTooltipText(tooltipText string) {
	var _arg0 *C.GtkSourceSnippetChunk // out
	var _arg1 *C.char                  // out

	_arg0 = (*C.GtkSourceSnippetChunk)(unsafe.Pointer(chunk.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(tooltipText)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_source_snippet_chunk_set_tooltip_text(_arg0, _arg1)
	runtime.KeepAlive(chunk)
	runtime.KeepAlive(tooltipText)
}
