// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
// extern gboolean _gotk4_gtksource5_HoverProviderInterface_populate(GtkSourceHoverProvider*, GtkSourceHoverContext*, GtkSourceHoverDisplay*, GError**);
// extern gboolean _gotk4_gtksource5_HoverProviderInterface_populate_finish(GtkSourceHoverProvider*, GAsyncResult*, GError**);
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// glib.Type values for gtksourcehoverprovider.go.
var GTypeHoverProvider = externglib.Type(C.gtk_source_hover_provider_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeHoverProvider, F: marshalHoverProvider},
	})
}

type HoverProvider struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*HoverProvider)(nil)
)

// HoverProviderer describes HoverProvider's interface methods.
type HoverProviderer interface {
	externglib.Objector

	PopulateAsync(ctx context.Context, context *HoverContext, display *HoverDisplay, callback gio.AsyncReadyCallback)
	PopulateFinish(result gio.AsyncResulter) error
}

var _ HoverProviderer = (*HoverProvider)(nil)

func wrapHoverProvider(obj *externglib.Object) *HoverProvider {
	return &HoverProvider{
		Object: obj,
	}
}

func marshalHoverProvider(p uintptr) (interface{}, error) {
	return wrapHoverProvider(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//    - ctx (optional)
//    - context
//    - display
//    - callback (optional)
//
func (self *HoverProvider) PopulateAsync(ctx context.Context, context *HoverContext, display *HoverDisplay, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GtkSourceHoverProvider // out
	var _arg3 *C.GCancellable           // out
	var _arg1 *C.GtkSourceHoverContext  // out
	var _arg2 *C.GtkSourceHoverDisplay  // out
	var _arg4 C.GAsyncReadyCallback     // out
	var _arg5 C.gpointer

	_arg0 = (*C.GtkSourceHoverProvider)(unsafe.Pointer(externglib.InternObject(self).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GtkSourceHoverContext)(unsafe.Pointer(externglib.InternObject(context).Native()))
	_arg2 = (*C.GtkSourceHoverDisplay)(unsafe.Pointer(externglib.InternObject(display).Native()))
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gtk_source_hover_provider_populate_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(self)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(context)
	runtime.KeepAlive(display)
	runtime.KeepAlive(callback)
}

// The function takes the following parameters:
//
func (self *HoverProvider) PopulateFinish(result gio.AsyncResulter) error {
	var _arg0 *C.GtkSourceHoverProvider // out
	var _arg1 *C.GAsyncResult           // out
	var _cerr *C.GError                 // in

	_arg0 = (*C.GtkSourceHoverProvider)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(externglib.InternObject(result).Native()))

	C.gtk_source_hover_provider_populate_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}
