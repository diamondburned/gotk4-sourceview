// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtksourceview/gtksource.h>
import "C"

//export _gotk4_gtksource5_Completion_ConnectHide
func _gotk4_gtksource5_Completion_ConnectHide(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gtksource5_Completion_ConnectProviderAdded
func _gotk4_gtksource5_Completion_ConnectProviderAdded(arg0 C.gpointer, arg1 *C.GtkSourceCompletionProvider, arg2 C.guintptr) {
	var f func(provider CompletionProviderer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(provider CompletionProviderer))
	}

	var _provider CompletionProviderer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtksource.CompletionProviderer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CompletionProviderer)
			return ok
		})
		rv, ok := casted.(CompletionProviderer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtksource.CompletionProviderer")
		}
		_provider = rv
	}

	f(_provider)
}

//export _gotk4_gtksource5_Completion_ConnectProviderRemoved
func _gotk4_gtksource5_Completion_ConnectProviderRemoved(arg0 C.gpointer, arg1 *C.GtkSourceCompletionProvider, arg2 C.guintptr) {
	var f func(provider CompletionProviderer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(provider CompletionProviderer))
	}

	var _provider CompletionProviderer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtksource.CompletionProviderer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CompletionProviderer)
			return ok
		})
		rv, ok := casted.(CompletionProviderer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtksource.CompletionProviderer")
		}
		_provider = rv
	}

	f(_provider)
}

//export _gotk4_gtksource5_Completion_ConnectShow
func _gotk4_gtksource5_Completion_ConnectShow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
