// Code generated by girgen. DO NOT EDIT.

package gtksource

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtksourceview/gtksource.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_source_hover_get_type()), F: marshalHoverer},
	})
}

type Hover struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Hover)(nil)
)

func wrapHover(obj *externglib.Object) *Hover {
	return &Hover{
		Object: obj,
	}
}

func marshalHoverer(p uintptr) (interface{}, error) {
	return wrapHover(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
func (self *Hover) AddProvider(provider HoverProviderer) {
	var _arg0 *C.GtkSourceHover         // out
	var _arg1 *C.GtkSourceHoverProvider // out

	_arg0 = (*C.GtkSourceHover)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSourceHoverProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_source_hover_add_provider(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(provider)
}

// The function takes the following parameters:
//
func (self *Hover) RemoveProvider(provider HoverProviderer) {
	var _arg0 *C.GtkSourceHover         // out
	var _arg1 *C.GtkSourceHoverProvider // out

	_arg0 = (*C.GtkSourceHover)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkSourceHoverProvider)(unsafe.Pointer(provider.Native()))

	C.gtk_source_hover_remove_provider(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(provider)
}
